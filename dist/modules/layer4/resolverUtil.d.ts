import { ApolloServerPlugin } from '@apollo/server';
import { GraphQLResolveInfo } from 'graphql';
import { genContextUtil } from '../layer3';
export declare function assertValueNonNull<TReturn>(value: TReturn | null, errorMessage?: string): TReturn;
export declare function assertValueNonEmptyString(value: string, errorMessage?: string): string;
/**
 * Throws an error if the requester doesn't have a `site_user` record.
 * This is the appropriate authentication guard to use the vast majority of the time.
 *
 * Though you can use this directly in a resolver, it is recommended to use
 * the plugin generated by `genAuthenticationGuardApolloServerPlugin()` instead
 * to handle authentication guards.
 */
export declare function guardIsAuthenticated(context: genContextUtil.IAbstractContext): void;
/**
 * Throws an error if the requester isn't authenticated via the auth provider; not
 * having a `site_user` record will not throw an error.
 * This is useful during the registration process, where a user might have an auth
 * provider ID, but doesn't have a `site_user` record yet.
 *
 * Though you can use this directly in a resolver, it is recommended to use
 * the plugin generated by `genAuthenticationGuardApolloServerPlugin()` instead
 * to handle authentication guards.
 */
export declare function guardIsAuthProviderAuthenticated(context: genContextUtil.IAbstractContext): void;
export type IAuthenticationGuardType = 'requireSiteUser' | 'requireAuthProviderUser' | 'allowUnauthenticated';
export type IGraphqlPath2GuardType = Record<string, IAuthenticationGuardType>;
export interface IAuthenticationGuardConfig {
    graphqlPath2GuardType: IGraphqlPath2GuardType;
    debugMode?: boolean;
}
/**
 * By default, all paths will have a guard type of `'requireSiteUser'`.
 *
 * If you wish to override this for a particular path, you can specify that path and the
 * desired guard type in `graphqlPath2GuardType`. For instance, if you want to make the
 * path `Query.inviteByCode.id` accessible without authentication, you would pass:
 * ```typescript
 *  {
 *    'Query.inviteByCode.id': 'allowUnauthenticated'
 *  }
 * ```
 *
 * The above will only work for an exact path; if you want to cover all child paths, you
 * must also add a path with a wildcard character (`'*'`). For instance, if you want to make
 * all paths below `Query.inviteByCode` accessible without authentication, you would pass:
 * ```typescript
 *  {
 *    'Query.inviteByCode.*': 'allowUnauthenticated'
 *  }
 * ```
 *
 * Note that if a child path further down the tree has its own entry in `graphqlPath2GuardType`,
 * that path's setting will override any parent path settings.
 *
 * If a path you want to specify includes a node that represents an array index, you must
 * use the wildcard character for that node.
 *
 * Example: Consider a situation in which you want to allow unauthenticated users to access
 * the basic information on another user, but a certain subfield should still be restricted.
 * Further consider that the user info is coming from an array of user objects. You could
 * construct a specification as such:
 * ```typescript
 *  {
 *    'Query.users': 'allowUnauthenticated',
 *    'Query.users.*': 'allowUnauthenticated',
 *    'Query.users.nodes.*.subscriptionRate': 'requiresSiteUser'
 *  }
 * ```
 */
export declare function genAuthenticationGuardApolloServerPlugin<TContext extends genContextUtil.IAbstractContext>({ graphqlPath2GuardType, debugMode }: IAuthenticationGuardConfig): ApolloServerPlugin<TContext>;
export declare function descendantFieldValuesDiffSetIsLengthZero({ info, matchSet, ignoreFieldsWithPrefixes }: {
    info: GraphQLResolveInfo;
    matchSet: string[];
    ignoreFieldsWithPrefixes?: string[];
}): boolean;
export declare function descendantFieldValuesIncludePrefix({ info, prefix }: {
    info: GraphQLResolveInfo;
    prefix: string;
}): boolean;
export declare function genFnCheckDescendantFieldsForPrefix(info: GraphQLResolveInfo): (prefix: string) => boolean;
export declare function childFieldValuesDiffSetIsLengthZero({ info, matchSet }: {
    info: GraphQLResolveInfo;
    matchSet: string[];
}): boolean;
