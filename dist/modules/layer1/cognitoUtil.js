"use strict";var __importDefault=this&&this.__importDefault||function(mod){return mod&&mod.__esModule?mod:{default:mod}};Object.defineProperty(exports,"__esModule",{value:true});exports.init=init;exports.getUserData=getUserData;exports.getAuthProviderUserId2Email=getAuthProviderUserId2Email;exports.listUsers=listUsers;exports.setUserLoginCodePhoneNumber=setUserLoginCodePhoneNumber;exports.setUserPreferredMfaMethod=setUserPreferredMfaMethod;exports.getAuthProviderUserIdFromEmail=getAuthProviderUserIdFromEmail;exports.resendRegistrationConfirmationCode=resendRegistrationConfirmationCode;exports.resetPasswordForUser=resetPasswordForUser;exports.deleteUser=deleteUser;const lodash_1=__importDefault(require("lodash"));const luxon_1=require("luxon");const client_cognito_identity_provider_1=require("@aws-sdk/client-cognito-identity-provider");const layer0_1=require("../layer0");let __config=null;function init(config){__config=config}function __getConfig(){if(!__config){throw new Error("MODULE_NOT_INITIALIZED: cognitoUtil")}return __config}async function getUserData(id){if(!id){return null}try{const rawResponse=await __adminGetUser(id);return __rawResponse2UserData(rawResponse)}catch{return null}}async function __adminGetUser(id){const config=__getConfig();const client=__getClient();return await layer0_1.errorUtil.wrapCanThrowAwsError((async()=>{const command=new client_cognito_identity_provider_1.AdminGetUserCommand({UserPoolId:config.aws.cognito.userPoolId,Username:id});const response=await client.send(command);return response}),(()=>client.destroy()))}async function getAuthProviderUserId2Email(filterIds){const usersFromList=await listUsers();const userId2Email=lodash_1.default.mapValues(lodash_1.default.keyBy(usersFromList,(user=>user.username)),(user=>user.email));const filterIdsSet=new Set(filterIds??[]);return filterIds?lodash_1.default.pickBy(userId2Email,((email,userId)=>filterIdsSet.has(userId))):userId2Email}async function listUsers(options){const config=__getConfig();const client=__getClient();return await layer0_1.errorUtil.wrapCanThrowAwsError((async()=>{const users=[];let page=null;do{page=await __listUsersPage(client,config.aws.cognito.userPoolId,options,page?page.paginationToken:undefined);users.push(...page.users)}while(!!page.paginationToken&&page.users.length>0);return users}),(()=>client.destroy()))}async function __listUsersPage(client,userPoolId,options,paginationToken){const command=new client_cognito_identity_provider_1.ListUsersCommand({AttributesToGet:["email"],Limit:20,UserPoolId:userPoolId,Filter:options?.filterUserStatus?`cognito:user_status = "${options.filterUserStatus}"`:undefined,PaginationToken:paginationToken});const response=await client.send(command);return{paginationToken:response.PaginationToken??"",users:lodash_1.default.map(response.Users,(user=>{const attributesByName=lodash_1.default.keyBy(user.Attributes??[],(attribute=>attribute.Name??""));return{username:user.Username??"",email:attributesByName["email"]?.Value??"",enabled:user.Enabled??false,userStatus:user.UserStatus??"",createdAt:user.UserCreateDate?luxon_1.DateTime.fromJSDate(user.UserCreateDate):null}}))}}function __getClient(){return layer0_1.errorUtil.wrapCanThrowAwsErrorSync((()=>{const config=__getConfig();return new client_cognito_identity_provider_1.CognitoIdentityProviderClient({region:config.aws.cognito.region,credentials:config.aws.credentials?{accessKeyId:config.aws.credentials.accessKeyId,secretAccessKey:config.aws.credentials.secretAccessKey}:undefined})}))}function __rawResponse2UserData(response){const dictAttributes=lodash_1.default.mapValues(lodash_1.default.keyBy(response.UserAttributes??[],(attribute=>attribute.Name??"")),(attribute=>attribute.Value??""));return{cognitoId:response.Username??"",email:dictAttributes["email_verified"]?dictAttributes["email"]:"",phoneNumber:dictAttributes["phone_number_verified"]?dictAttributes["phone_number"]:""}}async function setUserLoginCodePhoneNumber(authProviderUserId,phoneNumber){const config=__getConfig();const client=__getClient();return await layer0_1.errorUtil.wrapCanThrowAwsError((async()=>{const command=new client_cognito_identity_provider_1.AdminUpdateUserAttributesCommand({UserPoolId:config.aws.cognito.userPoolId,Username:authProviderUserId,UserAttributes:[{Name:"phone_number",Value:phoneNumber}]});return await client.send(command)}),(()=>client.destroy()))}async function setUserPreferredMfaMethod(authProviderUserId,mfaMethod){const config=__getConfig();const client=__getClient();return await layer0_1.errorUtil.wrapCanThrowAwsError((async()=>{const command=new client_cognito_identity_provider_1.AdminSetUserMFAPreferenceCommand({UserPoolId:config.aws.cognito.userPoolId,Username:authProviderUserId,SMSMfaSettings:{Enabled:true,PreferredMfa:mfaMethod==="sms"},SoftwareTokenMfaSettings:{Enabled:true,PreferredMfa:mfaMethod==="softwareToken"}});return await client.send(command)}),(()=>client.destroy()))}async function getAuthProviderUserIdFromEmail(email){try{const config=__getConfig();const client=__getClient();const command=new client_cognito_identity_provider_1.ListUsersCommand({UserPoolId:config.aws.cognito.userPoolId,Filter:`email = "${email}"`});const response=await client.send(command);client.destroy();return response.Users?.[0]?.Username??""}catch{return""}}async function resendRegistrationConfirmationCode(email){const authProviderUserId=await getAuthProviderUserIdFromEmail(email);if(await __isUserAlreadyConfirmed(authProviderUserId)){throw new Error("USER_ALREADY_CONFIRMED")}await __resendConfirmationCode(authProviderUserId)}async function __isUserAlreadyConfirmed(authProviderUserId){const response=await __adminGetUser(authProviderUserId);return response.UserStatus!=="UNCONFIRMED"}async function __resendConfirmationCode(authProviderUserId){const config=__getConfig();const client=__getClient();await layer0_1.errorUtil.wrapCanThrowAwsError((async()=>await client.send(new client_cognito_identity_provider_1.ResendConfirmationCodeCommand({ClientId:config.aws.cognito.clientId,Username:authProviderUserId}))),(()=>client.destroy()))}async function resetPasswordForUser(authProviderUserId){const config=__getConfig();const client=__getClient();await layer0_1.errorUtil.wrapCanThrowAwsError((async()=>await client.send(new client_cognito_identity_provider_1.AdminResetUserPasswordCommand({UserPoolId:config.aws.cognito.userPoolId,Username:authProviderUserId}))),(()=>client.destroy()))}async function deleteUser(id){const config=__getConfig();const client=__getClient();await layer0_1.errorUtil.wrapCanThrowAwsError((async()=>await client.send(new client_cognito_identity_provider_1.AdminDeleteUserCommand({UserPoolId:config.aws.cognito.userPoolId,Username:id}))),(()=>client.destroy()))}