"use strict";var __importDefault=this&&this.__importDefault||function(mod){return mod&&mod.__esModule?mod:{default:mod}};Object.defineProperty(exports,"__esModule",{value:true});exports.portSchema=exports.nonEmptyStringSchema=void 0;exports.getConfig=getConfig;exports.getEnvName=getEnvName;exports.init=init;const lodash_1=__importDefault(require("lodash"));const jsonschema_1=require("jsonschema");const path_1=__importDefault(require("path"));let __loadedConfigOptions=null;function getConfig(){if(!__loadedConfigOptions){if(__options.fullPathToConfigFile){__loadedConfigOptions=require(__options.fullPathToConfigFile)}else if(__options.configOptionsObject){__loadedConfigOptions=__options.configOptionsObject}}const errors=[];if(!__validateEnvConfigOptions(__loadedConfigOptions,errors)){console.error(lodash_1.default.repeat("*",80));console.error("ENVIRONMENT CONFIG FILE CONTENTS ARE INVALID!");console.error(lodash_1.default.repeat("*",80));console.table(lodash_1.default.reduce(errors,((accumulator,error)=>{accumulator[error.property]=error.message;return accumulator}),{}));console.error(lodash_1.default.repeat("*",80));throw new Error("INVALID_CONFIG_FILE")}return __loadedConfigOptions}function __checkAgainstSchema(value,schema,errors){const v=new jsonschema_1.Validator;const result=v.validate(value,schema);if(result.errors.length>0){lodash_1.default.forEach(result.errors,(err=>errors.push(err)));return false}return true}function __validateEnvConfigOptions(envConfigOptions,errors){return __checkAgainstSchema(envConfigOptions,__options.configOptionsSchema,errors)}function getEnvName(){if(process.env&&process.env.ENV_NAME){return process.env.ENV_NAME}else if(process.argv.length>=3){return process.argv[2]}else{return""}}exports.nonEmptyStringSchema={type:"string",minLength:1};exports.portSchema={type:"number",multipleOf:1,minimum:1,maximum:65535};let __options;function __loaderInit(options){if(!options.fullPathToConfigFile&&!options.configOptionsObject){throw new Error("Either fullPathToConfigFile or configObject must be specified.")}__options=lodash_1.default.cloneDeep(options)}function init(configSchema,options){const envName=options?.overrideEnvName??getEnvName();if(!envName){throw new Error("NO_ENVIRONMENT_SPECIFIED")}__loaderInit({configOptionsSchema:configSchema,fullPathToConfigFile:path_1.default.join(process.cwd(),"config","env",`${envName}.json`)})}