"use strict";var __createBinding=this&&this.__createBinding||(Object.create?function(o,m,k,k2){if(k2===undefined)k2=k;var desc=Object.getOwnPropertyDescriptor(m,k);if(!desc||("get"in desc?!m.__esModule:desc.writable||desc.configurable)){desc={enumerable:true,get:function(){return m[k]}}}Object.defineProperty(o,k2,desc)}:function(o,m,k,k2){if(k2===undefined)k2=k;o[k2]=m[k]});var __setModuleDefault=this&&this.__setModuleDefault||(Object.create?function(o,v){Object.defineProperty(o,"default",{enumerable:true,value:v})}:function(o,v){o["default"]=v});var __importStar=this&&this.__importStar||function(mod){if(mod&&mod.__esModule)return mod;var result={};if(mod!=null)for(var k in mod)if(k!=="default"&&Object.prototype.hasOwnProperty.call(mod,k))__createBinding(result,mod,k);__setModuleDefault(result,mod);return result};var __exportStar=this&&this.__exportStar||function(m,exports){for(var p in m)if(p!=="default"&&!Object.prototype.hasOwnProperty.call(exports,p))__createBinding(exports,m,p)};var __importDefault=this&&this.__importDefault||function(mod){return mod&&mod.__esModule?mod:{default:mod}};Object.defineProperty(exports,"__esModule",{value:true});exports.apolloPlugins=void 0;exports.startServer=startServer;const lodash_1=__importDefault(require("lodash"));const http_1=__importDefault(require("http"));const express_1=__importDefault(require("express"));const cors_1=__importDefault(require("cors"));const body_parser_1=require("body-parser");const ws_1=require("ws");const ws_2=require("graphql-ws/lib/use/ws");const express4_1=require("@apollo/server/express4");const drainHttpServer_1=require("@apollo/server/plugin/drainHttpServer");const default_1=require("@apollo/server/plugin/landingPage/default");const mock_1=require("@graphql-tools/mock");const schema_1=require("@graphql-tools/schema");const server_1=require("@apollo/server");const layer0_1=require("../../layer0");const layer1_1=require("../../layer1");const layer2_1=require("../../layer2");const layer3_1=require("../../layer3");const layer4_1=require("../../layer4");const types=__importStar(require("./types"));__exportStar(require("./types"),exports);exports.apolloPlugins=__importStar(require("./apolloPlugins"));const __graphqlPath="/graphql";function __createApolloServer(config,fullGenContextUtilConfig,app){const httpServer=http_1.default.createServer(app);const typeDefs=layer1_1.gqlSchemaUtil.loadSchemaDirectory(config.gqlSchemaDirectory);const schema=(0,schema_1.makeExecutableSchema)({typeDefs:typeDefs,resolvers:config.resolvers});const{callableGenContext:callableGenContext,genContext:genContext}=layer3_1.genContextUtil.init(fullGenContextUtilConfig);const webSocketServer=new ws_1.WebSocketServer({server:httpServer,path:__graphqlPath});const genPluginListInput={disableRequestLoggerPlugin:config.disableRequestLoggerPlugin,resolverAuthenticationGuardConfig:config.resolverAuthenticationGuardConfig,isProd:config.isProd,httpServer:httpServer,schema:schema,callableGenContext:callableGenContext,webSocketServer:webSocketServer};const apolloServer=new server_1.ApolloServer({introspection:!config.isProd,schema:config.schemaMockConfig?.enabled?(0,mock_1.addMocksToSchema)({schema:schema,preserveResolvers:true,mocks:config.schemaMockConfig.scalarMocks}):schema,rootValue:{},plugins:[...__genPluginList(genPluginListInput),...config.fnGenPluginList?.(genPluginListInput)??[]],formatError:error=>{console.error(error);return error}});return{genContext:genContext,apolloServer:apolloServer,httpServer:httpServer}}function __genPluginList({disableRequestLoggerPlugin:disableRequestLoggerPlugin,resolverAuthenticationGuardConfig:resolverAuthenticationGuardConfig,isProd:isProd,httpServer:httpServer,schema:schema,callableGenContext:callableGenContext,webSocketServer:webSocketServer}){const plugins=[];plugins.push((0,drainHttpServer_1.ApolloServerPluginDrainHttpServer)({httpServer:httpServer}));const serverCleanup=(0,ws_2.useServer)({schema:schema,context:async context=>{const rawAuthorizationHeader=context.connectionParams?.Headers?.Authorization??"";const authorizationHeader=lodash_1.default.isString(rawAuthorizationHeader)?rawAuthorizationHeader:"";if(authorizationHeader){return await callableGenContext({authorization:authorizationHeader})}}},webSocketServer);plugins.push({serverWillStart:async()=>({drainServer:async()=>{await serverCleanup.dispose()}})});if(!disableRequestLoggerPlugin){plugins.push(__genRequestLoggerPlugin())}if(resolverAuthenticationGuardConfig){plugins.push(layer4_1.resolverUtil.genAuthenticationGuardApolloServerPlugin(resolverAuthenticationGuardConfig))}if(!isProd){plugins.push((0,default_1.ApolloServerPluginLandingPageLocalDefault)())}return plugins}function __genRequestLoggerPlugin(){const requestLoggerPlugin={requestDidStart:async()=>({willSendResponse:async context=>{await layer2_1.dbUtil.audit.logGraphqlQuery({userData:{userId:context.contextValue.base.userId??"",authProviderUserId:context.contextValue.base.authProviderUserId??"",clientIp:context.contextValue.base.clientIp??""},gqlQuery:context.request.query??"",gqlVariables:context.request.variables??null,response:context.response?context.response:null});if(lodash_1.default.some(context.errors??[],(error=>error.message==="ACCESS_DENIED"))){const base=context.contextValue.base;layer0_1.promiseUtil.runInParallel((async()=>{await layer3_1.securityCheck.checkAndNotifyForMultipleAccessDeniedErrors(base.clientIp??"",base.userId,base.authProviderUserId)}))}}})};return requestLoggerPlugin}function __getPort(){if(process.argv[3]){const port=+process.argv[3]||0;if(port>0){return port}}return 4e3}function __genGetFileHandler(genContextUtilConfig){const{callableGenContext:callableGenContext}=layer3_1.genContextUtil.init(genContextUtilConfig);return async(req,res)=>{try{const context=await callableGenContext(req.headers);if(!context.base.userId){throw layer1_1.validationUtil.newAccessDeniedError()}const id=req.params.id;if(!id){throw new Error("INVALID_FILE_ID")}const s3Key=await layer2_1.fileService.getS3KeyFromFileId(id);if(!s3Key){throw new Error("CANNOT_RETRIEVE_FILE")}const retVal=await layer2_1.fileService.getFileStream(s3Key);res.writeHead(200,{"Content-Type":retVal.contentType});await new Promise(((resolve,reject)=>{retVal.body.on("error",(err=>{reject(err)}));retVal.body.on("end",(()=>{res.end();resolve()}));retVal.body.pipe(res)}))}catch(err){console.error(err)}finally{if(!res.writableEnded){res.end()}}}}async function startServer(config){const fullGenContextUtilConfig=types.calcFullGenContextUtilConfig(config);const port=__getPort();layer1_1.pubSub.init(config.pubSubConfig);const app=(0,express_1.default)();const{genContext:genContext,apolloServer:apolloServer,httpServer:httpServer}=__createApolloServer(config,fullGenContextUtilConfig,app);await apolloServer.start();app.use(__graphqlPath,(0,cors_1.default)(),(0,body_parser_1.json)({limit:config.bodyParserLimit??"70mb"}),(0,express4_1.expressMiddleware)(apolloServer,{context:genContext}));app.get("/",(0,cors_1.default)(),((req,res)=>{res.status(200).send("OK")}));const getFileHandler=__genGetFileHandler(fullGenContextUtilConfig);app.options("/file/:id",(0,cors_1.default)());app.get("/file/:id",(0,cors_1.default)(),getFileHandler);await new Promise((resolve=>httpServer.listen({port:port},(()=>{console.log(`Environment: ${config.name}`);console.log(`Server running at :${port}${__graphqlPath}.`);resolve()}))))}