"use strict";var __createBinding=this&&this.__createBinding||(Object.create?function(o,m,k,k2){if(k2===undefined)k2=k;var desc=Object.getOwnPropertyDescriptor(m,k);if(!desc||("get"in desc?!m.__esModule:desc.writable||desc.configurable)){desc={enumerable:true,get:function(){return m[k]}}}Object.defineProperty(o,k2,desc)}:function(o,m,k,k2){if(k2===undefined)k2=k;o[k2]=m[k]});var __setModuleDefault=this&&this.__setModuleDefault||(Object.create?function(o,v){Object.defineProperty(o,"default",{enumerable:true,value:v})}:function(o,v){o["default"]=v});var __importStar=this&&this.__importStar||function(mod){if(mod&&mod.__esModule)return mod;var result={};if(mod!=null)for(var k in mod)if(k!=="default"&&Object.prototype.hasOwnProperty.call(mod,k))__createBinding(result,mod,k);__setModuleDefault(result,mod);return result};var __importDefault=this&&this.__importDefault||function(mod){return mod&&mod.__esModule?mod:{default:mod}};Object.defineProperty(exports,"__esModule",{value:true});exports.defaultPresignedUrlExpiresInS=void 0;exports.init=init;exports.getS3KeyFromFileId=getS3KeyFromFileId;exports.getFileStream=getFileStream;exports.storeFile=storeFile;exports.requestPresignedUrl=requestPresignedUrl;exports.processExpiredPresignedUrls=processExpiredPresignedUrls;exports.completePresignedUrlUpload=completePresignedUrlUpload;const lodash_1=__importDefault(require("lodash"));const uuid=__importStar(require("uuid"));const fs=__importStar(require("fs"));const path=__importStar(require("path"));const s3_request_presigner_1=require("@aws-sdk/s3-request-presigner");const bluebird_1=require("bluebird");const stream_1=require("stream");const client_s3_1=require("@aws-sdk/client-s3");const layer0_1=require("../layer0");const layer1_1=require("../layer1");const __defaultTempDirectory=path.join("tmp","uploaded");let __config=null;function init(config){__config=config}function __getConfig(){if(!__config){throw new Error("MODULE_NOT_INITIALIZED: fileService")}return __config}async function getS3KeyFromFileId(fileId){const config=__getConfig();const row=await layer1_1.dbService.getDb().queryBuilder().select({s3Key:"s3_key"}).from(config.tableNames.apiFile).where({id:fileId}).first();return row?.s3Key??""}async function getFileStream(s3Key){const config=__getConfig();const client=__getClient();const command=new client_s3_1.GetObjectCommand({Bucket:config.aws.s3.bucketName,Key:`${config.aws.s3.directoryName}/${s3Key}`});const result=await client.send(command);if(!result.Body||!result.ContentLength||!result.ContentType){throw new Error("FILE_STREAM_ERROR")}if(!(result.Body instanceof stream_1.Readable)){throw new Error("INVALID_FILE_RESPONSE_BODY")}return{contentType:result.ContentType??"",rawBody:result.Body,body:result.Body}}async function storeFile({fileInput:fileInput,allowPublicAccess:allowPublicAccess,trx:trx,disableDeleteLocalFileAfterSuccess:disableDeleteLocalFileAfterSuccess}){const config=__getConfig();const client=__getClient();return await layer0_1.errorUtil.wrapCanThrowAwsError((async()=>{const{fileName:fileName,fnDeleteFile:fnDeleteFile,fullFilePath:fullFilePath,mimeType:mimeType}=__extractFileData(fileInput);const{fileKey:fileKey,pathFileKey:pathFileKey,fullKey:fullKey}=__genKeysFromAccessLevel(config,!!allowPublicAccess);const{fileSizeBytes:fileSizeBytes,publicUrl:publicUrl}=await __s3PutObject({config:config,client:client,fullFilePath:fullFilePath,fullKey:fullKey,mimeType:mimeType,pathFileKey:pathFileKey,allowPublicAccess:allowPublicAccess});if(!disableDeleteLocalFileAfterSuccess){fnDeleteFile()}await __saveToDbAndDeleteFromS3OnRollback({config:config,client:client,saveToDbArgs:{id:fileKey,s3Key:pathFileKey,fileName:fileName,mimeType:mimeType,fileSizeBytes:fileSizeBytes,publicUrl:publicUrl,trx:trx},fullKey:fullKey});return fileKey}),(()=>client.destroy()))}function __extractFileData(fileInput){let fileName="";let fullFilePath="";let mimeType="";let fnDeleteFile=()=>{};if(fileInput.type==="encodedFile"){const metadata=fileInput.encodedFile.writeToFileSystem();if(!metadata){throw new Error("INVALID_FILE")}fileName=metadata.filename;fullFilePath=metadata.fullPath;mimeType=metadata.mimeType;fnDeleteFile=fileInput.encodedFile.delete}else if(fileInput.type==="fileContent"){const retVal=__writeFileContentToLocalFileSystem({fileContent:fileInput.content,tempDirectory:fileInput.tempDirectory,encoding:fileInput.encoding});fileName=fileInput.content.fileName;fullFilePath=retVal.fullFilePath;mimeType=fileInput.content.mimeType;fnDeleteFile=retVal.fnDeleteFile}else{throw new Error("INVALID_FILE_INPUT_TYPE")}return{fileName:fileName,fullFilePath:fullFilePath,mimeType:mimeType,fnDeleteFile:fnDeleteFile}}async function __s3PutObject({config:config,client:client,fullFilePath:fullFilePath,fullKey:fullKey,mimeType:mimeType,pathFileKey:pathFileKey,allowPublicAccess:allowPublicAccess}){const command=new client_s3_1.PutObjectCommand({Bucket:config.aws.s3.bucketName,Key:fullKey,ContentType:mimeType,Body:fs.createReadStream(fullFilePath)});await client.send(command);let fileSizeBytes=0;if(config.fileServiceConfig?.apiFileTableConfig?.useSizeColumn){fileSizeBytes=await __getFileSize(client,config.aws.s3.bucketName,fullKey)}let publicUrl="";if(allowPublicAccess&&config.fileServiceConfig?.apiFileTableConfig?.usePublicUrlColumn){publicUrl=__genPublicUrl(config.aws.s3.bucketName,config.aws.region,config.aws.s3.directoryName,pathFileKey)}return{fileSizeBytes:fileSizeBytes,publicUrl:publicUrl}}function __writeFileContentToLocalFileSystem({fileContent:fileContent,tempDirectory:tempDirectory,encoding:encoding}){const finalTempDirectory=tempDirectory??__defaultTempDirectory;const uniqueDirectoryName=uuid.v4();const directory=path.join(finalTempDirectory,uniqueDirectoryName);const fullFilePath=path.join(directory,fileContent.fileName);fs.mkdirSync(directory,{recursive:true});fs.writeFileSync(fullFilePath,fileContent.content,{encoding:encoding});const fnDeleteFile=()=>{fs.unlinkSync(fullFilePath)};return{fullFilePath:fullFilePath,fnDeleteFile:fnDeleteFile}}function __genPathFileKey(pathKey,fileKey){pathKey=pathKey.trim();while(pathKey.startsWith("/")){pathKey=pathKey.slice(1)}while(pathKey.endsWith("/")){pathKey=pathKey.slice(0,-1)}pathKey=pathKey.trim();const pathKeyWithSlash=pathKey.length>0?`${pathKey}/`:"";return`${pathKeyWithSlash}${fileKey}`}function __genFullKey(directoryName,pathKey,fileKey){return`${directoryName}/${__genPathFileKey(pathKey,fileKey)}`}function __genKeysFromAccessLevel(config,allowPublicAccess){const fileKey=uuid.v4();const pathKey=allowPublicAccess?"public":"private";const pathFileKey=__genPathFileKey(pathKey,fileKey);const fullKey=__genFullKey(config.aws.s3.directoryName,pathKey,fileKey);return{fileKey:fileKey,pathKey:pathKey,pathFileKey:pathFileKey,fullKey:fullKey}}function __genPublicUrl(bucketName,region,directoryName,pathFileKey){return`https://${bucketName}.s3.${region}.amazonaws.com/${directoryName}/${pathFileKey}`}async function __getFileSize(client,bucket,key){const command=new client_s3_1.GetObjectAttributesCommand({Bucket:bucket,Key:key,ObjectAttributes:["ObjectSize"]});const response=await client.send(command);return response.ObjectSize??0}function __getClient(){return layer0_1.errorUtil.wrapCanThrowAwsErrorSync((()=>{const config=__getConfig();return new client_s3_1.S3Client({region:config.aws.region,credentials:config.aws.credentials?{accessKeyId:config.aws.credentials.accessKeyId,secretAccessKey:config.aws.credentials.secretAccessKey}:undefined})}))}async function __saveToDb({id:id,s3Key:s3Key,fileName:fileName,mimeType:mimeType,fileSizeBytes:fileSizeBytes,publicUrl:publicUrl,trx:trx}){const config=__getConfig();const insertObject={id:id,s3_key:s3Key,file_name:fileName};if(config.fileServiceConfig?.apiFileTableConfig?.useSizeColumn){insertObject.size_bytes=fileSizeBytes}if(config.fileServiceConfig?.apiFileTableConfig?.usePublicUrlColumn){insertObject.public_url=publicUrl}if(config.fileServiceConfig?.apiFileTableConfig?.useMimeTypeColumn){insertObject.mime_type=mimeType}await(trx??layer1_1.dbService.getDb()).queryBuilder().insert(insertObject).into(config.tableNames.apiFile)}async function __saveToDbAndDeleteFromS3OnRollback({config:config,client:client,saveToDbArgs:saveToDbArgs,fullKey:fullKey}){try{await __saveToDb(saveToDbArgs)}catch(err){const deleteCommand=new client_s3_1.DeleteObjectCommand({Bucket:config.aws.s3.bucketName,Key:fullKey});await client.send(deleteCommand);throw err}}exports.defaultPresignedUrlExpiresInS=900;async function requestPresignedUrl({requestUserId:requestUserId,userSpecifiedId:userSpecifiedId,fileName:fileName,mimeType:mimeType,allowPublicAccess:allowPublicAccess,expiresInS:expiresInS}){expiresInS=expiresInS??exports.defaultPresignedUrlExpiresInS;const config=__getConfig();if(!config.tableNames.apiFilePresignedUrl){throw new Error("FILE_SERVICE__TABLE_NAME_FOR_PRESIGNED_URL_REQUIRED")}const client=__getClient();const{pathFileKey:pathFileKey,fullKey:fullKey}=__genKeysFromAccessLevel(config,allowPublicAccess);const presignedUrl=await __getPresignedUrl(config,client,fullKey,mimeType,expiresInS);const apiFileId=await __insertPresignedUrl({tableNames:config.tableNames,requestUserId:requestUserId,userSpecifiedId:userSpecifiedId,presignedUrl:presignedUrl,fileName:fileName,mimeType:mimeType,pathFileKey:pathFileKey,expiresInS:expiresInS});return{apiFileId:apiFileId,presignedUrl:presignedUrl}}function __getPresignedUrl(config,client,fullKey,mimeType,expiresInS){return layer0_1.errorUtil.wrapCanThrowAwsError((async()=>{const command=new client_s3_1.PutObjectCommand({Bucket:config.aws.s3.bucketName,Key:fullKey,ContentType:mimeType});const presignedUrl=await(0,s3_request_presigner_1.getSignedUrl)(client,command,{expiresIn:expiresInS});return presignedUrl}),(()=>client.destroy()))}async function __insertPresignedUrl({tableNames:tableNames,userSpecifiedId:userSpecifiedId,requestUserId:requestUserId,presignedUrl:presignedUrl,fileName:fileName,mimeType:mimeType,pathFileKey:pathFileKey,expiresInS:expiresInS}){if(!tableNames.apiFilePresignedUrl){throw new Error("FILE_SERVICE__TABLE_NAME_FOR_PRESIGNED_URL_REQUIRED")}const builder=layer1_1.dbService.getDb();const withInsertedPresignedUrl="__inserted_presigned_url__";let rawId="";try{const rows=await builder.queryBuilder().with(withInsertedPresignedUrl,builder.queryBuilder().insert({uploader_user_id:requestUserId,user_specified_id:userSpecifiedId,presigned_url:presignedUrl,expiry:builder.raw(`NOW() + (INTERVAL '1 second' * :expiresInS::int)`,{expiresInS:expiresInS})}).into(tableNames.apiFilePresignedUrl).returning(["id"])).insert({s3_key:pathFileKey,file_name:fileName,mime_type:mimeType,presigned_url_id:builder.queryBuilder().select(["id"]).from(withInsertedPresignedUrl).limit(1)}).into(tableNames.apiFile).returning(["id"]);rawId=rows[0]?.id}catch{throw new Error("INVALID_USER_SPECIFIED_ID")}return lodash_1.default.isString(rawId)?rawId:""}async function processExpiredPresignedUrls(){const config=__getConfig();if(!config.tableNames.apiFilePresignedUrl){throw new Error("FILE_SERVICE__TABLE_NAME_FOR_PRESIGNED_URL_REQUIRED")}const client=__getClient();const expiredPresignedUrls=await __getDbPresignedUrls({apiFileTableName:config.tableNames.apiFile,presignedUrlTableName:config.tableNames.apiFilePresignedUrl,isExpired:true});const apiFileIds=lodash_1.default.map(expiredPresignedUrls,(expiredPresignedUrl=>expiredPresignedUrl.apiFileId));const apiFileId2FileSize=await __getApiFileId2FileSize(config,client,expiredPresignedUrls);await layer1_1.dbService.getDb().transaction((async trx=>{await __lockApiFiles(trx,config.tableNames.apiFile,apiFileIds);await bluebird_1.Promise.each(expiredPresignedUrls,(async expiredPresignedUrl=>{const fileSize=apiFileId2FileSize[expiredPresignedUrl.apiFileId];if(lodash_1.default.isNumber(fileSize)&&fileSize>0){await __completePresignedUrlApiFileInDb({tableNames:config.tableNames,apiFileId:expiredPresignedUrl.apiFileId,fileSize:fileSize,trx:trx})}else{await __deleteApiFileAndPresignedUrl(trx,config.tableNames,expiredPresignedUrl.apiFileId)}}))}))}async function __getApiFileId2FileSize(config,client,presignedUrls){return await bluebird_1.Promise.reduce(presignedUrls,(async(mapping,presignedUrl)=>{const fullKey=__genKeyFromDirectoryAndDbS3Key(config.aws.s3.directoryName,presignedUrl.s3Key);let fileSize=0;try{fileSize=await __getFileSize(client,config.aws.s3.bucketName,fullKey)}catch{}mapping[presignedUrl.apiFileId]=fileSize;return mapping}),{})}async function __lockApiFiles(trx,apiFileTableName,ids){const queryStrings=lodash_1.default.map(ids,(id=>`  PERFORM id FROM ${apiFileTableName} WHERE id=${trx.raw("?",[id])} FOR UPDATE;`));const fullQueryString=`DO $$BEGIN\n${queryStrings.join("\n")}\nEND$$;`;await trx.raw(fullQueryString)}async function completePresignedUrlUpload({requestUserId:requestUserId,presignedUrlId:presignedUrlId}){const config=__getConfig();if(!config.tableNames.apiFilePresignedUrl){throw new Error("FILE_SERVICE__TABLE_NAME_FOR_PRESIGNED_URL_REQUIRED")}const client=__getClient();const presignedUrl=await __getDbPresignedUrl({apiFileTableName:config.tableNames.apiFile,presignedUrlTableName:config.tableNames.apiFilePresignedUrl,id:presignedUrlId});if(!presignedUrl){throw new Error("INVALID_PRESIGNED_URL")}if(presignedUrl.uploaderUserId!==requestUserId){throw layer1_1.validationUtil.newAccessDeniedError()}const fullKey=__genKeyFromDirectoryAndDbS3Key(config.aws.s3.directoryName,presignedUrl.s3Key);const fileSize=await __getFileSize(client,config.aws.s3.bucketName,fullKey);await __completePresignedUrlApiFileInDb({tableNames:config.tableNames,apiFileId:presignedUrl.apiFileId,fileSize:fileSize})}function __genKeyFromDirectoryAndDbS3Key(directoryName,s3Key){return`${directoryName}/${s3Key}`}async function __getDbPresignedUrl({apiFileTableName:apiFileTableName,presignedUrlTableName:presignedUrlTableName,id:id}){const urls=await __getDbPresignedUrls({apiFileTableName:apiFileTableName,presignedUrlTableName:presignedUrlTableName,id:id});return urls[0]??null}async function __getDbPresignedUrls({apiFileTableName:apiFileTableName,presignedUrlTableName:presignedUrlTableName,id:id,isExpired:isExpired}){const builder=layer1_1.dbService.getDb();const query=builder.queryBuilder().select({uploaderUserId:`${presignedUrlTableName}.uploader_user_id`,apiFileId:`${apiFileTableName}.id`,s3Key:`${apiFileTableName}.s3_key`}).from(presignedUrlTableName).leftJoin(apiFileTableName,`${presignedUrlTableName}.id`,`${apiFileTableName}.presigned_url_id`);if(id){query.where(`${presignedUrlTableName}.id`,id)}if(isExpired){query.whereRaw(`${presignedUrlTableName}.expiry < NOW()`)}const rows=await query;return lodash_1.default.map(rows,(row=>({uploaderUserId:row.uploaderUserId??"",apiFileId:row.apiFileId??"",s3Key:row.s3Key??""})))}async function __completePresignedUrlApiFileInDb({tableNames:tableNames,apiFileId:apiFileId,fileSize:fileSize,trx:trx}){const builder=trx??layer1_1.dbService.getDb();const withUpdateFileSize="__update_file_size__";const withDeletePresignedUrl="__delete_presigned_url__";await builder.queryBuilder().with(withUpdateFileSize,builder.queryBuilder().update({size_bytes:fileSize}).table(tableNames.apiFile).where({id:apiFileId}).returning(["id"])).with(withDeletePresignedUrl,builder.queryBuilder().delete().from(tableNames.apiFilePresignedUrl??"").where("id",builder.queryBuilder().select(["presigned_url_id"]).from(tableNames.apiFile).where({id:apiFileId})).returning(["id"])).select({updateFileSize:builder.queryBuilder().select(["id"]).from(withUpdateFileSize),deletePresignedUrl:builder.queryBuilder().select(["id"]).from(withDeletePresignedUrl)})}async function __deleteApiFileAndPresignedUrl(trx,tableNames,apiFileId){const builder=trx??layer1_1.dbService.getDb();const withDeletePresignedUrl="__delete_presigned_url__";const withDeleteApiFile="__delete_api_file__";await builder.queryBuilder().with(withDeletePresignedUrl,builder.queryBuilder().delete().from(tableNames.apiFilePresignedUrl??"").where("id",builder.queryBuilder().select(["presigned_url_id"]).from(tableNames.apiFile).where({id:apiFileId})).returning(["id"])).with(withDeleteApiFile,builder.queryBuilder().delete().from(tableNames.apiFile).where({id:apiFileId}).returning(["id"])).select({presignedUrlId:builder.queryBuilder().select(["id"]).from(withDeletePresignedUrl),apiFileId:builder.queryBuilder().select(["id"]).from(withDeleteApiFile)})}