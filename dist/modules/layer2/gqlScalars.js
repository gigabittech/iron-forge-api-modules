"use strict";var __importDefault=this&&this.__importDefault||function(mod){return mod&&mod.__esModule?mod:{default:mod}};Object.defineProperty(exports,"__esModule",{value:true});exports.cursorType=exports.decimalType=exports.currencyUsdType=exports.encodedFileOutputScalarType=exports.encodedFileInputScalarType=exports.objectScalarType=exports.isoDateScalarType=exports.timestampScalarType=void 0;const lodash_1=__importDefault(require("lodash"));const luxon_1=require("luxon");const big_js_1=__importDefault(require("big.js"));const graphql_1=require("graphql");const layer1_1=require("../layer1");exports.timestampScalarType=new graphql_1.GraphQLScalarType({name:"Timestamp",description:"An ISO string representation of a timestamp.",serialize:value=>{const dtValue=value;const isoValue=dtValue.toISO();if(isoValue===null){throw new Error("INVALID_TIMESTAMP")}return isoValue},parseValue:value=>luxon_1.DateTime.fromISO(value),parseLiteral:ast=>{if(ast.kind===graphql_1.Kind.STRING){return luxon_1.DateTime.fromISO(ast.value)}throw new Error("CANNOT_PARSE_TIMESTAMP_LITERAL")}});const __reIsoDate=/^[0-9]{4}-[0-9]{2}-[0-9]{2}$/;function __validateAndReturnIsoDateString(value){if(!lodash_1.default.isString(value)||!value.match(__reIsoDate)){throw new Error("INVALID_ISO_DATE")}const dtValue=luxon_1.DateTime.fromISO(value);if(!dtValue.isValid){throw new Error("INVALID_ISO_DATE")}return dtValue.toISODate()}exports.isoDateScalarType=new graphql_1.GraphQLScalarType({name:"IsoDate",description:"An ISO string representation of a date without time or a time zone.",serialize:value=>__validateAndReturnIsoDateString(value),parseValue:value=>__validateAndReturnIsoDateString(value),parseLiteral:ast=>{if(ast.kind===graphql_1.Kind.STRING){return __validateAndReturnIsoDateString(ast.value)}throw new Error("CANNOT_PARSE_ISO_DATE_LITERAL")}});function __parseObject(value){try{return JSON.parse(value)}catch(e){return{}}}exports.objectScalarType=new graphql_1.GraphQLScalarType({name:"Object",description:"An object in JSON format.",serialize:value=>JSON.stringify(value),parseValue:value=>__parseObject(value),parseLiteral:ast=>{if(ast.kind===graphql_1.Kind.STRING){return __parseObject(ast.value)}throw new Error("CANNOT_PARSE_OBJECT_LITERAL")}});exports.encodedFileInputScalarType=new graphql_1.GraphQLScalarType({name:"EncodedFileInput",description:"A base-64 encoded file sent as input.",serialize:()=>"",parseValue:value=>new layer1_1.encodedFileUtil.EncodedFile(value),parseLiteral:ast=>{if(ast.kind===graphql_1.Kind.STRING){return new layer1_1.encodedFileUtil.EncodedFile(ast.value)}throw new Error("CANNOT_PARSE_ENCODED_FILE_INPUT_LITERAL")}});exports.encodedFileOutputScalarType=new graphql_1.GraphQLScalarType({name:"EncodedFileOutput",description:"A base-64 encoded file sent as output.",serialize:value=>value,parseValue:()=>{throw new Error("ENCODED_FILE_OUTPUT_CANNOT_BE_USED_AS_INPUT")},parseLiteral:()=>{throw new Error("ENCODED_FILE_OUTPUT_CANNOT_BE_USED_AS_INPUT")}});const __maxCurrencyUsdValue=(0,big_js_1.default)("999999999999.99");const __minCurrencyUsdValue=__maxCurrencyUsdValue.mul(-1);function __parseCurrencyUsd(value){try{const bValue=(0,big_js_1.default)((0,big_js_1.default)(value).toFixed(2));if(bValue.lt(__minCurrencyUsdValue)||bValue.gt(__maxCurrencyUsdValue)){throw new Error}return bValue}catch{throw new Error("INVALID_CURRENCY_USD")}}exports.currencyUsdType=new graphql_1.GraphQLScalarType({name:"CurrencyUsd",description:"String representation of an amount of United States dollars.",serialize:value=>value.toFixed(2),parseValue:value=>__parseCurrencyUsd(value),parseLiteral:ast=>{if(ast.kind===graphql_1.Kind.STRING){return __parseCurrencyUsd(ast.value)}throw new Error("CANNOT_PARSE_CURRENCY_USD_LITERAL")}});exports.decimalType=new graphql_1.GraphQLScalarType({name:"Decimal",description:"String representation of an arbitrary-precision number.",serialize:value=>value.toString(),parseValue:value=>(0,big_js_1.default)(value),parseLiteral:ast=>{if(ast.kind===graphql_1.Kind.STRING){return(0,big_js_1.default)(ast.value)}throw new Error("CANNOT_PARSE_DECIMAL_LITERAL")}});exports.cursorType=new graphql_1.GraphQLScalarType({name:"Cursor",description:"The ID of a cursor in a page.",serialize:value=>value,parseValue:value=>value,parseLiteral:ast=>{if(ast.kind===graphql_1.Kind.STRING){return ast.value}throw new Error("CANNOT_PARSE_CURSOR_LITERAL")}});