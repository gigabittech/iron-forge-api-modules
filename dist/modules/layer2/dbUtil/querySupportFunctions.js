"use strict";var __createBinding=this&&this.__createBinding||(Object.create?function(o,m,k,k2){if(k2===undefined)k2=k;var desc=Object.getOwnPropertyDescriptor(m,k);if(!desc||("get"in desc?!m.__esModule:desc.writable||desc.configurable)){desc={enumerable:true,get:function(){return m[k]}}}Object.defineProperty(o,k2,desc)}:function(o,m,k,k2){if(k2===undefined)k2=k;o[k2]=m[k]});var __setModuleDefault=this&&this.__setModuleDefault||(Object.create?function(o,v){Object.defineProperty(o,"default",{enumerable:true,value:v})}:function(o,v){o["default"]=v});var __importStar=this&&this.__importStar||function(mod){if(mod&&mod.__esModule)return mod;var result={};if(mod!=null)for(var k in mod)if(k!=="default"&&Object.prototype.hasOwnProperty.call(mod,k))__createBinding(result,mod,k);__setModuleDefault(result,mod);return result};var __importDefault=this&&this.__importDefault||function(mod){return mod&&mod.__esModule?mod:{default:mod}};Object.defineProperty(exports,"__esModule",{value:true});exports.gqlPaginationInput2OffsetBasedPaginationInput=gqlPaginationInput2OffsetBasedPaginationInput;exports.genQuerySupportFunctionsWithUserData=genQuerySupportFunctionsWithUserData;exports.makeBuilder=makeBuilder;exports.encryptNumber=encryptNumber;exports.decryptNumber=decryptNumber;exports.genFnArchive=genFnArchive;exports.updateReturningOldAndNew=updateReturningOldAndNew;const lodash_1=__importDefault(require("lodash"));const layer0_1=require("../../layer0");const layer1_1=require("../../layer1");const audit=__importStar(require("./shared/audit"));const __defaultPageSize=20;function gqlPaginationInput2OffsetBasedPaginationInput(gqlPaginationInput){if(!gqlPaginationInput){return null}const rawOffset=gqlPaginationInput?.after??"";const offset=rawOffset?decryptNumber(rawOffset):0;return{offset:offset,limit:gqlPaginationInput?.first??__defaultPageSize}}function genQuerySupportFunctionsWithUserData({tableName:tableName,objectKey2SqlColumn:objectKey2SqlColumn,fnPreProcessAllQuery:fnPreProcessAllQuery,fnPreProcessByIdQuery:fnPreProcessByIdQuery,fnAugmentBaseQuery:fnAugmentBaseQuery,fnGenAugmentedBaseQuery:fnGenAugmentedBaseQuery,dbRow2Object:dbRow2Object}){function __mapSqlColumns(builder,userData,baseTableName){const finalTableName=baseTableName??tableName;return lodash_1.default.mapValues(objectKey2SqlColumn,(sqlColumn=>{if(lodash_1.default.isString(sqlColumn)){return sqlColumn.startsWith(".")?`${finalTableName}${sqlColumn}`:sqlColumn}else{return sqlColumn({builder:builder,userData:userData,tableName:finalTableName})}}))}function genColumns(builder,userData,baseTableName){return __mapSqlColumns(builder,userData,baseTableName)}function genColumnsArray(builder,userData,baseTableName){return lodash_1.default.values(genColumns(builder,userData,baseTableName))}function __makeBaseSelectQuery(userData,trx,disableSelect){const builder=makeBuilder(trx);let query=builder.queryBuilder().from(tableName);if(!disableSelect){query.select(__mapSqlColumns(builder,userData))}if(fnGenAugmentedBaseQuery){query=fnGenAugmentedBaseQuery({trx:trx,builder:builder,query:query,userData:userData,tableName:tableName})}else if(fnAugmentBaseQuery){fnAugmentBaseQuery({trx:trx,builder:builder,query:query,userData:userData,tableName:tableName})}return query}function __applyOffsetBasedPaginationInputToQuery(query,offsetBasedPaginationInput){if(offsetBasedPaginationInput){query.offset(offsetBasedPaginationInput.offset).limit(offsetBasedPaginationInput.limit)}}async function _genPageInfoGqlObject({trx:trx,userData:userData,fnAugmentQuery:fnAugmentQuery,fnGenAugmentedQuery:fnGenAugmentedQuery,offsetBasedPaginationInput:offsetBasedPaginationInput}){const builder=makeBuilder(trx);let internalQuery=__makeBaseSelectQuery(userData,trx);if(fnGenAugmentedQuery){internalQuery=fnGenAugmentedQuery({trx:trx,builder:builder,userData:userData,tableName:tableName,query:internalQuery})}else if(fnAugmentQuery){fnAugmentQuery({trx:trx,builder:builder,userData:userData,tableName:tableName,query:internalQuery})}return __genPageInfoGqlObject({trx:trx,query:internalQuery,offsetBasedPaginationInput:offsetBasedPaginationInput})}function genRunSelectQueryReturningOne(fnAdditionalAugmentQuery){return async params=>{const builder=makeBuilder(params.trx);const query=__makeBaseSelectQuery(params.userData,params.trx);if(params?.fnAugmentQuery){params.fnAugmentQuery({trx:params.trx,builder:builder,userData:params.userData,query:query,tableName:tableName})}if(fnAdditionalAugmentQuery){fnAdditionalAugmentQuery({trx:params.trx,builder:builder,userData:params.userData,query:query,tableName:tableName})}const row=await query.first();return row?dbRow2Object(row):null}}function genRunSelectQueryReturningMany(fnAdditionalAugmentQuery){return async params=>{if(params?.gqlPaginationInput){params.offsetBasedPaginationInput=gqlPaginationInput2OffsetBasedPaginationInput(params.gqlPaginationInput)??undefined}const builder=makeBuilder(params.trx);let query=__makeBaseSelectQuery(params.userData,params.trx);if(params?.fnGenAugmentedQuery){query=params.fnGenAugmentedQuery({trx:params.trx,builder:builder,userData:params.userData,tableName:tableName,query:query})}else if(params?.fnAugmentQuery){params.fnAugmentQuery({trx:params.trx,builder:builder,userData:params.userData,tableName:tableName,query:query})}if(fnAdditionalAugmentQuery){fnAdditionalAugmentQuery({trx:params.trx,builder:builder,userData:params.userData,query:query,tableName:tableName})}__applyOffsetBasedPaginationInputToQuery(query,params?.offsetBasedPaginationInput);const rows=await query;return{nodes:lodash_1.default.map(rows,(row=>dbRow2Object(row))),pageInfo:await _genPageInfoGqlObject({trx:params.trx,userData:params.userData,fnAugmentQuery:params.fnAugmentQuery,fnGenAugmentedQuery:params.fnGenAugmentedQuery,offsetBasedPaginationInput:params.offsetBasedPaginationInput??null})}}}function genRunSelectQueryReturningCount(fnAdditionalAugmentQuery){return async params=>{if(params.gqlPaginationInput){params.offsetBasedPaginationInput=gqlPaginationInput2OffsetBasedPaginationInput(params.gqlPaginationInput)??undefined}const builder=makeBuilder(params.trx);let query=__makeBaseSelectQuery(params.userData,params.trx,"disableSelect");query.select({count:builder.raw("COUNT(*)")});if(params.fnGenAugmentedQuery){query=params.fnGenAugmentedQuery({trx:params.trx,builder:builder,query:query,userData:params.userData,tableName:tableName})}else if(params.fnAugmentQuery){params.fnAugmentQuery({trx:params.trx,builder:builder,query:query,userData:params.userData,tableName:tableName})}if(fnAdditionalAugmentQuery){fnAdditionalAugmentQuery({trx:params.trx,builder:builder,query:query,userData:params.userData,tableName:tableName})}__applyOffsetBasedPaginationInputToQuery(query,params.offsetBasedPaginationInput);const row=await query.first();return row?+row?.count||0:0}}const __runSelectQueryReturningOne=genRunSelectQueryReturningOne();const __runSelectQueryReturningMany=genRunSelectQueryReturningMany();const __runSelectQueryReturningCount=genRunSelectQueryReturningCount();async function __getByIdWithTrx(trx,userData,id){const builder=makeBuilder(trx);if(fnPreProcessByIdQuery){await fnPreProcessByIdQuery({trx:trx,builder:builder,userData:userData,ids:[id]})}const fnAugmentQuery=({tableName:tableName,query:query})=>query.where(`${tableName}.id`,id);return __runSelectQueryReturningOne({trx:trx,userData:userData,fnAugmentQuery:fnAugmentQuery})}async function __getByIdsWithTrx(trx,userData,ids){const builder=makeBuilder(trx);if(fnPreProcessByIdQuery){await fnPreProcessByIdQuery({trx:trx,builder:builder,userData:userData,ids:ids})}const fnAugmentQuery=({tableName:tableName,query:query})=>query.whereIn(`${tableName}.id`,ids);const{nodes:nodes}=await __runSelectQueryReturningMany({trx:trx,userData:userData,fnAugmentQuery:fnAugmentQuery});return nodes}async function __getAllWithTrx({trx:trx,userData:userData,paginationInput:paginationInput}){const builder=makeBuilder(trx);if(fnPreProcessAllQuery){await fnPreProcessAllQuery({trx:trx,builder:builder,userData:userData})}return __runSelectQueryReturningMany({trx:trx,userData:userData,offsetBasedPaginationInput:gqlPaginationInput2OffsetBasedPaginationInput(paginationInput)??undefined})}const getById=({trx:trx,userData:userData,id:id})=>trx?__getByIdWithTrx(trx,userData,id):layer1_1.dbService.getDb().transaction((trx=>__getByIdWithTrx(trx,userData,id)));const getByIds=({trx:trx,userData:userData,ids:ids})=>trx?__getByIdsWithTrx(trx,userData,ids):layer1_1.dbService.getDb().transaction((trx=>__getByIdsWithTrx(trx,userData,ids)));return{__genColumns:genColumns,__genColumnsArray:genColumnsArray,__dbRow2Object:dbRow2Object,__makeBaseSelectQuery:__makeBaseSelectQuery,__runSelectQueryReturningOne:__runSelectQueryReturningOne,__runSelectQueryReturningMany:__runSelectQueryReturningMany,__runSelectQueryReturningCount:__runSelectQueryReturningCount,exportable:{getAll:({trx:trx,userData:userData,paginationInput:paginationInput})=>trx?__getAllWithTrx({trx:trx,userData:userData,paginationInput:paginationInput??undefined}):layer1_1.dbService.getDb().transaction((_trx=>__getAllWithTrx({trx:_trx,userData:userData,paginationInput:paginationInput??undefined}))),makeDataLoader:({trx:trx,userData:userData})=>layer1_1.dataLoaderUtil.makeDataLoader((async ids=>{const objects=await getByIds({trx:trx,userData:userData,ids:ids});return lodash_1.default.filter(objects,(object=>!!object.id))})),getById:getById,getByIds:getByIds,archive:genFnArchive({tableName:tableName})}}}function makeBuilder(trx){return trx??layer1_1.dbService.getDb()}async function __genPageInfoGqlObject({trx:trx,query:query,offsetBasedPaginationInput:offsetBasedPaginationInput}){if(offsetBasedPaginationInput===null){return{totalRows:0,pages:[]}}const input=offsetBasedPaginationInput;const totalRows=await __getPageCount(query,trx);const numPages=Math.ceil(totalRows/(input.limit||1));const pages=lodash_1.default.times(numPages,(pageIndex=>pageIndex*input.limit));const currentPageIndex=lodash_1.default.findIndex(pages,(page=>page===input.offset));const previousPageIndex=currentPageIndex-1;const nextPageIndex=currentPageIndex+1;const encryptedPages=lodash_1.default.map(pages,(page=>encryptNumber(page)));return{totalRows:totalRows,previousPage:encryptedPages[previousPageIndex]??null,nextPage:encryptedPages[nextPageIndex]??null,pages:encryptedPages}}async function __getPageCount(query,trx){const internalQuery=query.clone();const builder=trx??layer1_1.dbService.getDb();const __withTable="__base__";const __countColumn="__count__";const wrapperQuery=builder.queryBuilder().with(__withTable,internalQuery).select({[__countColumn]:builder.raw("COUNT(*)")}).from(__withTable).first();const row=await wrapperQuery;return+row?.[__countColumn]||0}function encryptNumber(n){return layer0_1.pageNumberUtil.encryptInteger(n)}function decryptNumber(encrypted){return layer0_1.pageNumberUtil.decryptInteger(encrypted)}function genFnArchive({tableName:tableName,columnName:columnName,fnGenQueryGetId:fnGenQueryGetId,fnPostProcess:fnPostProcess}){function archive(userData,id,trx){if(trx){return archiveWithTransaction(trx,userData,id)}else{return layer1_1.dbService.getDb().transaction((_trx=>archiveWithTransaction(_trx,userData,id)))}}async function archiveWithTransaction(trx,userData,id){const updateResult=await updateReturningOldAndNew({trx:trx,tableName:tableName,id:fnGenQueryGetId?fnGenQueryGetId(trx,id):id,columnName2Value:{[columnName??"is_archived"]:true}});if(updateResult){const newRowId=updateResult.newRow.id;await audit.logUpdate({trx:trx,userData:userData,tableName:tableName,rowId:newRowId,oldRow:updateResult.oldRow,newRow:updateResult.newRow})}if(fnPostProcess){await fnPostProcess(trx,userData,id)}}return archive}async function updateReturningOldAndNew({trx:trx,tableName:tableName,idColumn:idColumn,id:id,columnName2Value:columnName2Value}){if(lodash_1.default.every(lodash_1.default.values(columnName2Value),(value=>lodash_1.default.isUndefined(value)))){return null}const columnNames=lodash_1.default.uniq([...lodash_1.default.keys(columnName2Value),"id"]);const tableOldRow="__old_row__";const tableNewRow="__new_row__";idColumn=idColumn??"id";const rows=await trx.queryBuilder().with(tableOldRow,trx.queryBuilder().select(columnNames).from(tableName).where({[idColumn]:id})).with(tableNewRow,trx.queryBuilder().update(columnName2Value).table(tableName).where({[idColumn]:id}).returning(columnNames)).select(columnNames).select({__type__:trx.raw("?",["old"])}).from(tableOldRow).unionAll(trx.queryBuilder().select(columnNames).select({__type__:trx.raw("?",["new"])}).from(tableNewRow));const rowsByType=lodash_1.default.keyBy(rows,(row=>row.__type__));if(!rowsByType.old||!rowsByType.new){return null}delete rowsByType.old.__type__;delete rowsByType.new.__type__;return{oldRow:rowsByType.old,newRow:rowsByType.new}}