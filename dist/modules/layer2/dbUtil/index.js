"use strict";var __createBinding=this&&this.__createBinding||(Object.create?function(o,m,k,k2){if(k2===undefined)k2=k;var desc=Object.getOwnPropertyDescriptor(m,k);if(!desc||("get"in desc?!m.__esModule:desc.writable||desc.configurable)){desc={enumerable:true,get:function(){return m[k]}}}Object.defineProperty(o,k2,desc)}:function(o,m,k,k2){if(k2===undefined)k2=k;o[k2]=m[k]});var __setModuleDefault=this&&this.__setModuleDefault||(Object.create?function(o,v){Object.defineProperty(o,"default",{enumerable:true,value:v})}:function(o,v){o["default"]=v});var __importStar=this&&this.__importStar||function(mod){if(mod&&mod.__esModule)return mod;var result={};if(mod!=null)for(var k in mod)if(k!=="default"&&Object.prototype.hasOwnProperty.call(mod,k))__createBinding(result,mod,k);__setModuleDefault(result,mod);return result};var __importDefault=this&&this.__importDefault||function(mod){return mod&&mod.__esModule?mod:{default:mod}};Object.defineProperty(exports,"__esModule",{value:true});exports.timeFormat=exports.dateFormat=exports.lockWithRelationshipChecks=exports.lock=exports.valuesList=exports.querySupportFunctions=exports.mLock=exports.audit=void 0;exports.init=init;exports.genDateString=genDateString;exports.makeBuilder=makeBuilder;exports.genFreeTextMatchRawString=genFreeTextMatchRawString;exports.addFreeTextMatchAcrossMultipleColumnsWhereClause=addFreeTextMatchAcrossMultipleColumnsWhereClause;exports.addOmniFreeTextFilter=addOmniFreeTextFilter;exports.genRawConcatenationFromColumns=genRawConcatenationFromColumns;exports.addSortToQuery=addSortToQuery;exports.makeLowerCaseColumn=makeLowerCaseColumn;exports.genEmptyPageInfo=genEmptyPageInfo;exports.genSaveSets=genSaveSets;exports.genSaveSetsByFnGetId=genSaveSetsByFnGetId;exports.genColumnsForEnum=genColumnsForEnum;exports.dbRow2GqlObjectForEnum=dbRow2GqlObjectForEnum;exports.getEnumObjectsByName=getEnumObjectsByName;exports.getAllEnumValues=getAllEnumValues;exports.genEnumFunctions=genEnumFunctions;exports.runFunctionsInChunks=runFunctionsInChunks;exports.mapFunctionsInChunks=mapFunctionsInChunks;exports.gqlPaginationInput2OffsetBasedPaginationInput=gqlPaginationInput2OffsetBasedPaginationInput;exports.paginateQuery=paginateQuery;exports.genFnLock=genFnLock;exports.genQuerySupportFunctions=genQuerySupportFunctions;exports.genFnSave=genFnSave;exports.saveMultiple=saveMultiple;exports.genFnSaveChildren=genFnSaveChildren;exports.processValuePreservingNil=processValuePreservingNil;exports.updateReturningOldAndNew=updateReturningOldAndNew;exports.genFnArchive=genFnArchive;exports.deleteAndLog=deleteAndLog;exports.withTransaction=withTransaction;exports.toStringType=toStringType;exports.getAbstractObjectIdCreateIfNotExists=getAbstractObjectIdCreateIfNotExists;const lodash_1=__importDefault(require("lodash"));const bluebird_1=__importDefault(require("bluebird"));const layer0_1=require("../../layer0");const layer1_1=require("../../layer1");const audit=__importStar(require("./shared/audit"));const mLock=__importStar(require("./lock"));exports.audit=__importStar(require("./shared/audit"));exports.mLock=__importStar(require("./lock"));exports.querySupportFunctions=__importStar(require("./querySupportFunctions"));exports.valuesList=__importStar(require("./valuesList"));exports.lock=mLock.lock;exports.lockWithRelationshipChecks=mLock.lockWithRelationshipChecks;function init(config){audit.init(config.auditConfig);mLock.init({tableLockingOrder:config.tableLockingOrder??[],disableMultiCallLockTracking:config.disableMultiCallLockTracking})}exports.dateFormat="YYYY-MM-DD";exports.timeFormat="HH:mm:ss";const __defaultPageSize=20;function __encryptNumber(n){return layer0_1.pageNumberUtil.encryptInteger(n)}function __decryptNumber(encrypted){return layer0_1.pageNumberUtil.decryptInteger(encrypted)}function genDateString(date){const monthPiece=lodash_1.default.padStart((date.getMonth()+1).toString(),2,"0");const datePiece=lodash_1.default.padStart(date.getDate().toString(),2,"0");return`${date.getFullYear()}-${monthPiece}-${datePiece}`}function makeBuilder(trx){return trx??layer1_1.dbService.getDb()}function genFreeTextMatchRawString(column,freeTextIdentifier){return`(${column} ILIKE '%' || :${freeTextIdentifier} || '%')`}function addFreeTextMatchAcrossMultipleColumnsWhereClause(query,columns,freeText){const rawStrings=lodash_1.default.map(columns,(column=>genFreeTextMatchRawString(column,"freeText")));query.whereRaw(`(${lodash_1.default.join(rawStrings," OR ")})`,{freeText:freeText})}function addOmniFreeTextFilter(builder,query,columns,freeText){const adjustedColumns=lodash_1.default.map(columns,(column=>lodash_1.default.isString(column)?builder.raw(`LOWER(??)`,[column]):column));const rawStrings=lodash_1.default.map(adjustedColumns,(column=>genFreeTextMatchRawString(column,"freeText")));query.whereRaw(`(${lodash_1.default.join(rawStrings," OR ")})`,{freeText:freeText.trim().toLowerCase()})}function genRawConcatenationFromColumns(joinString,variableName2Column,trx){const variableNames=lodash_1.default.map(lodash_1.default.keys(variableName2Column),(name=>`:${name}:`));return(trx??layer1_1.dbService.getDb()).raw(lodash_1.default.join(variableNames,` || '${joinString}' || `),variableName2Column)}function addSortToQuery({query:query,gqlField2DbColumn:gqlField2DbColumn,sortDirection:sortDirection,gqlSortField:gqlSortField}){const direction=sortDirection==="descending"?"desc":"asc";const dbColumn=gqlField2DbColumn[gqlSortField];if(lodash_1.default.isString(dbColumn)){query.orderBy(dbColumn,direction)}else{query.orderByRaw(`(${dbColumn}) ${direction.toUpperCase()}`)}}function makeLowerCaseColumn(builder,column){return builder.raw(`LOWER(??)`,[column])}function genEmptyPageInfo(){return{pages:[],totalRows:0}}function genSaveSets(existingValueIds,inputValues){return genSaveSetsByFnGetId({existingValueIds:existingValueIds,objects:inputValues,fnGetIdFromObject:object=>object.id??""})}function genSaveSetsByFnGetId({existingValueIds:existingValueIds,objects:objects,fnGetIdFromObject:fnGetIdFromObject}){const inputIds=lodash_1.default.compact(lodash_1.default.map(objects,(object=>fnGetIdFromObject(object))));const idsToDelete=lodash_1.default.difference(existingValueIds,inputIds);const valuesToUpdate=lodash_1.default.map(objects,(object=>fnGetIdFromObject(object)?object:null));const valuesToInsert=lodash_1.default.map(objects,(object=>!fnGetIdFromObject(object)?object:null));return{idsToDelete:idsToDelete,valuesToUpdate:valuesToUpdate,valuesToInsert:valuesToInsert}}function __saveSets2SaveSetValues(valuesToInsert,valuesToUpdate){const length=Math.max(valuesToInsert.length,valuesToUpdate.length);return lodash_1.default.compact(lodash_1.default.times(length,(index=>{const valueToInsert=valuesToInsert[index];const valueToUpdate=valuesToUpdate[index];if(valueToInsert){return{type:"insert",value:valueToInsert}}else if(valueToUpdate){return{type:"update",value:valueToUpdate}}else{return null}})))}function genColumnsForEnum(tableName,additionalRawRowKey2DbColumn){let columns={id:`${tableName}.id`,name:`${tableName}.name`,displayName:`${tableName}.display_name`};if(additionalRawRowKey2DbColumn){columns=lodash_1.default.merge({},columns,lodash_1.default.mapValues(additionalRawRowKey2DbColumn,(dbColumn=>`${tableName}.${dbColumn}`)))}return columns}function dbRow2GqlObjectForEnum(fnGenShell,row,additionalGqlObjectKey2FnGenGqlObjectValue){let object={...fnGenShell(row.name),id:row.id,displayName:row.displayName};if(additionalGqlObjectKey2FnGenGqlObjectValue){object=lodash_1.default.merge({},object,lodash_1.default.mapValues(additionalGqlObjectKey2FnGenGqlObjectValue,(fnGenGqlObjectValue=>fnGenGqlObjectValue(row))))}return object}async function getEnumObjectsByName(tableName,fnGenColumns,fnDbRow2GqlObject,names){const rows=await layer1_1.dbService.getDb().queryBuilder().select(fnGenColumns()).from(tableName).whereIn("name",names);return lodash_1.default.map(rows,fnDbRow2GqlObject)}async function getAllEnumValues(tableName,fnGenColumns,fnDbRow2GqlObject,fnAugmentBaseQuery,disableSort){const query=layer1_1.dbService.getDb().queryBuilder().select(fnGenColumns()).from(tableName);if(fnAugmentBaseQuery){fnAugmentBaseQuery(query,tableName)}let rows=await query;if(!disableSort){rows=lodash_1.default.sortBy(rows,(row=>row.displayName.toLowerCase()))}return lodash_1.default.map(rows,fnDbRow2GqlObject)}function genEnumFunctions({tableName:tableName,genShell:genShell,additionalRawRowKey2DbColumn:additionalRawRowKey2DbColumn,additionalGqlObjectKey2FnGenGqlObjectValue:additionalGqlObjectKey2FnGenGqlObjectValue,fnAugmentBaseQuery:fnAugmentBaseQuery,disableSort:disableSort}){const genColumns=()=>genColumnsForEnum(tableName,additionalRawRowKey2DbColumn);const dbRow2GqlObject=row=>dbRow2GqlObjectForEnum((name=>genShell(name)),row,additionalGqlObjectKey2FnGenGqlObjectValue);const getOptionsByName=names=>getEnumObjectsByName(tableName,genColumns,dbRow2GqlObject,names);const getAllValues=()=>getAllEnumValues(tableName,genColumns,dbRow2GqlObject,fnAugmentBaseQuery,disableSort);return{genColumns:genColumns,dbRow2GqlObject:dbRow2GqlObject,getOptionsByName:getOptionsByName,getAllValues:getAllValues,makeDataLoader:()=>layer1_1.dataLoaderUtil.makeDataLoaderUsingNameKey(getOptionsByName)}}const __chunkSize=25;async function runFunctionsInChunks(fns,chunkSize){const chunks=lodash_1.default.chunk(fns,chunkSize??__chunkSize);await bluebird_1.default.mapSeries(chunks,(chunkOfFns=>Promise.all(lodash_1.default.map(chunkOfFns,(fn=>fn())))))}async function mapFunctionsInChunks(fns,chunkSize){const chunks=lodash_1.default.chunk(fns,chunkSize??__chunkSize);const retVals=await bluebird_1.default.mapSeries(chunks,(chunkOfFns=>Promise.all(lodash_1.default.map(chunkOfFns,(fn=>fn())))));return lodash_1.default.flatten(retVals)}function gqlPaginationInput2OffsetBasedPaginationInput(gqlPaginationInput){if(!gqlPaginationInput){return null}const rawOffset=gqlPaginationInput?.after??"";const offset=rawOffset?__decryptNumber(rawOffset):0;return{offset:offset,limit:gqlPaginationInput?.first??__defaultPageSize}}function paginateQuery({query:query,gqlPaginationInput:gqlPaginationInput,trx:trx}){const offsetBasedPaginationInput=gqlPaginationInput?gqlPaginationInput2OffsetBasedPaginationInput(gqlPaginationInput):null;const paginatedQuery=query.clone();if(offsetBasedPaginationInput){paginatedQuery.offset(offsetBasedPaginationInput.offset).limit(offsetBasedPaginationInput.limit)}return{query:paginatedQuery,genPageInfoGblObject:()=>__genPageInfoGqlObject({trx:trx,query:query,offsetBasedPaginationInput:offsetBasedPaginationInput})}}async function __getPageCount(query,trx){const internalQuery=query.clone();const builder=trx??layer1_1.dbService.getDb();const __withTable="__base__";const __countColumn="__count__";const wrapperQuery=builder.queryBuilder().with(__withTable,internalQuery).select({[__countColumn]:builder.raw("COUNT(*)")}).from(__withTable).first();const row=await wrapperQuery;return+row?.[__countColumn]||0}async function __genPageInfoGqlObject({trx:trx,query:query,offsetBasedPaginationInput:offsetBasedPaginationInput}){if(offsetBasedPaginationInput===null){return{totalRows:0,pages:[]}}const input=offsetBasedPaginationInput;const totalRows=await __getPageCount(query,trx);const numPages=Math.ceil(totalRows/(input.limit||1));const pages=lodash_1.default.times(numPages,(pageIndex=>pageIndex*input.limit));const currentPageIndex=lodash_1.default.findIndex(pages,(page=>page===input.offset));const previousPageIndex=currentPageIndex-1;const nextPageIndex=currentPageIndex+1;const encryptedPages=lodash_1.default.map(pages,(page=>__encryptNumber(page)));return{totalRows:totalRows,previousPage:encryptedPages[previousPageIndex]??null,nextPage:encryptedPages[nextPageIndex]??null,pages:encryptedPages}}function genFnLock(tableName){const lock=async(trx,idOrIds)=>{await mLock.lock(trx,{[tableName]:idOrIds})};return lock}function genQuerySupportFunctions({tableName:tableName,gqlObjectKey2SqlColumn:gqlObjectKey2SqlColumn,fnPreProcessAllQuery:fnPreProcessAllQuery,fnPreProcessByIdQuery:fnPreProcessByIdQuery,fnAugmentBaseQuery:fnAugmentBaseQuery,fnGenAugmentedBaseQuery:fnGenAugmentedBaseQuery,dbRow2GqlObject:dbRow2GqlObject}){function genColumns(baseTableName){return lodash_1.default.mapValues(gqlObjectKey2SqlColumn,(sqlColumn=>sqlColumn.startsWith(".")?`${baseTableName??tableName}${sqlColumn}`:sqlColumn))}const transformedGqlObjectKey2SqlColumn=genColumns();function genColumnsArray(baseTableName){return lodash_1.default.map(lodash_1.default.values(gqlObjectKey2SqlColumn),(sqlColumn=>sqlColumn.startsWith(".")?`${baseTableName??tableName}${sqlColumn}`:sqlColumn))}function __makeBaseSelectQuery(trx,disableSelect){let query=layer1_1.dbService.getDb().queryBuilder().from(tableName);if(!disableSelect){query.select(transformedGqlObjectKey2SqlColumn)}if(trx){query.transacting(trx)}if(fnGenAugmentedBaseQuery){query=fnGenAugmentedBaseQuery(query,tableName,trx)}else if(fnAugmentBaseQuery){fnAugmentBaseQuery(query,tableName,trx)}return query}function __applyOffsetBasedPaginationInputToQuery(query,offsetBasedPaginationInput){if(offsetBasedPaginationInput){query.offset(offsetBasedPaginationInput.offset).limit(offsetBasedPaginationInput.limit)}}async function _genPageInfoGqlObject({trx:trx,fnAugmentQuery:fnAugmentQuery,fnGenAugmentedQuery:fnGenAugmentedQuery,offsetBasedPaginationInput:offsetBasedPaginationInput}){let internalQuery=__makeBaseSelectQuery(trx);if(fnGenAugmentedQuery){internalQuery=fnGenAugmentedQuery(internalQuery,tableName)}else if(fnAugmentQuery){fnAugmentQuery(internalQuery,tableName)}return __genPageInfoGqlObject({trx:trx,query:internalQuery,offsetBasedPaginationInput:offsetBasedPaginationInput})}function genRunSelectQueryReturningOne(fnAdditionalAugmentQuery){return async params=>{const query=__makeBaseSelectQuery(params?.trx);if(params?.fnAugmentQuery){params.fnAugmentQuery(query,tableName)}if(fnAdditionalAugmentQuery){fnAdditionalAugmentQuery(query,tableName)}const row=await query.first();return row?dbRow2GqlObject(row):null}}function genRunSelectQueryReturningMany(fnAdditionalAugmentQuery){return async params=>{if(params?.gqlPaginationInput){params.offsetBasedPaginationInput=gqlPaginationInput2OffsetBasedPaginationInput(params.gqlPaginationInput)??undefined}let query=__makeBaseSelectQuery(params?.trx);if(params?.fnGenAugmentedQuery){query=params.fnGenAugmentedQuery(query,tableName,params.trx)}else if(params?.fnAugmentQuery){params.fnAugmentQuery(query,tableName,params?.trx)}if(fnAdditionalAugmentQuery){fnAdditionalAugmentQuery(query,tableName)}__applyOffsetBasedPaginationInputToQuery(query,params?.offsetBasedPaginationInput);const rows=await query;return{nodes:lodash_1.default.map(rows,(row=>dbRow2GqlObject(row))),pageInfo:await _genPageInfoGqlObject({trx:params?.trx,fnAugmentQuery:params?.fnAugmentQuery,fnGenAugmentedQuery:params?.fnGenAugmentedQuery,offsetBasedPaginationInput:params?.offsetBasedPaginationInput??null})}}}function genRunSelectQueryReturningCount(fnAdditionalAugmentQuery){return async params=>{if(params?.gqlPaginationInput){params.offsetBasedPaginationInput=gqlPaginationInput2OffsetBasedPaginationInput(params.gqlPaginationInput)??undefined}const builder=makeBuilder(params?.trx);let query=__makeBaseSelectQuery(params?.trx,"disableSelect");query.select({count:builder.raw("COUNT(*)")});if(params?.fnGenAugmentedQuery){query=params.fnGenAugmentedQuery(query,tableName,params.trx)}else if(params?.fnAugmentQuery){params.fnAugmentQuery(query,tableName,params?.trx)}if(fnAdditionalAugmentQuery){fnAdditionalAugmentQuery(query,tableName)}__applyOffsetBasedPaginationInputToQuery(query,params?.offsetBasedPaginationInput);const row=await query.first();return row?+row?.count||0:0}}const __runSelectQueryReturningOne=genRunSelectQueryReturningOne();const __runSelectQueryReturningMany=genRunSelectQueryReturningMany();const __runSelectQueryReturningCount=genRunSelectQueryReturningCount();async function __getByIdWithTrx(trx,id,userData){if(fnPreProcessByIdQuery){await fnPreProcessByIdQuery(trx,[id],userData)}const fnAugmentQuery=(query,tableName)=>query.where(`${tableName}.id`,id);return __runSelectQueryReturningOne({trx:trx,fnAugmentQuery:fnAugmentQuery})}async function __getByIdsWithTrx(trx,ids,userData){if(fnPreProcessByIdQuery){await fnPreProcessByIdQuery(trx,ids,userData)}const fnAugmentQuery=(query,tableName)=>query.whereIn(`${tableName}.id`,ids);const{nodes:nodes}=await __runSelectQueryReturningMany({trx:trx,fnAugmentQuery:fnAugmentQuery});return nodes}async function __getAllWithTrx({trx:trx,userData:userData,paginationInput:paginationInput}){if(fnPreProcessAllQuery){await fnPreProcessAllQuery(trx,userData)}return __runSelectQueryReturningMany({trx:trx,offsetBasedPaginationInput:gqlPaginationInput2OffsetBasedPaginationInput(paginationInput)??undefined})}return{__genColumns:genColumns,__genColumnsArray:genColumnsArray,__dbRow2GqlObject:dbRow2GqlObject,__makeBaseSelectQuery:__makeBaseSelectQuery,__runSelectQueryReturningOne:__runSelectQueryReturningOne,__runSelectQueryReturningMany:__runSelectQueryReturningMany,__runSelectQueryReturningCount:__runSelectQueryReturningCount,__lock:genFnLock(tableName),exportable:{getAll:({trx:trx,userData:userData,paginationInput:paginationInput})=>trx?__getAllWithTrx({trx:trx,userData:userData,paginationInput:paginationInput??undefined}):layer1_1.dbService.getDb().transaction((_trx=>__getAllWithTrx({trx:_trx,userData:userData,paginationInput:paginationInput??undefined}))),getById:(id,trx,userData)=>trx?__getByIdWithTrx(trx,id,userData):layer1_1.dbService.getDb().transaction((_trx=>__getByIdWithTrx(_trx,id,userData))),getByIds:(ids,trx,userData)=>trx?__getByIdsWithTrx(trx,ids,userData):layer1_1.dbService.getDb().transaction((_trx=>__getByIdsWithTrx(_trx,ids,userData))),archive:genFnArchive({tableName:tableName})}}}function genFnSave({fnGetParentId:fnGetParentId,fnGetSelfId:fnGetSelfId,tableName:tableName,editColumnName2FnGetValue:editColumnName2FnGetValue,createColumnName2FnGetValue:createColumnName2FnGetValue,requiredFieldsForCreate:requiredFieldsForCreate,onConflictOptions:onConflictOptions,fnPreProcess:fnPreProcess,fnPostProcess:fnPostProcess}){const fnCreate=__genFnCreate({tableName:tableName,columnName2FnGetValueFromInput:lodash_1.default.merge({},editColumnName2FnGetValue,createColumnName2FnGetValue),requiredFields:requiredFieldsForCreate,onConflictOptions:onConflictOptions,fnPreProcess:fnPreProcess?(trx,userData,input)=>fnPreProcess(trx,userData,input,"create"):undefined,fnPostProcess:fnPostProcess?(trx,userData,id,input)=>fnPostProcess(trx,userData,id,input,"create"):undefined});const fnEdit=__genFnEdit({tableName:tableName,columnName2FnGetValueFromInput:editColumnName2FnGetValue,fnPreProcess:fnPreProcess?(trx,userData,input)=>fnPreProcess(trx,userData,input,"edit"):undefined,fnPostProcess:fnPostProcess?(trx,userData,id,input)=>fnPostProcess(trx,userData,id,input,"edit"):undefined});const save=(userData,input,trx)=>trx?saveWithTransaction(trx,userData,input):layer1_1.dbService.getDb().transaction((newTrx=>saveWithTransaction(newTrx,userData,input)));function getParentIdForParentlessObject(input){return!input.id?"*":""}async function saveWithTransaction(trx,userData,input){const parentId=fnGetParentId?await fnGetParentId(input,trx,userData):getParentIdForParentlessObject(input);const selfId=await fnGetSelfId(input,trx,userData);if(parentId){return fnCreate(trx,parentId,input,userData)}else if(selfId){return fnEdit(trx,selfId,input,userData)}else{throw new Error("INVALID_INPUT_FOR_SAVE")}}return save}function __genFnCreate({tableName:tableName,columnName2FnGetValueFromInput:columnName2FnGetValueFromInput,requiredFields:requiredFields,onConflictOptions:onConflictOptions,fnPreProcess:fnPreProcess,fnPostProcess:fnPostProcess}){async function create(trx,parentId,input,userData){lodash_1.default.forEach(requiredFields??[],(field=>{const value=input[field];if(value===null||lodash_1.default.isUndefined(value)||lodash_1.default.isString(value)&&value.trim().length===0){const fieldString=field.toString();if(fieldString){throw new Error(`MISSING_REQUIRED_FIELDS (${fieldString})`)}else{throw new Error("MISSING_REQUIRED_FIELDS")}}}));if(fnPreProcess){const preRetVal=await fnPreProcess(trx,userData,input);if(preRetVal){lodash_1.default.merge(columnName2FnGetValueFromInput,preRetVal)}}const insertRetVal=await insert(trx,parentId,input);let{id:id}=insertRetVal;const{columnName2Value:columnName2Value}=insertRetVal;if(id){await audit.logInsert({trx:trx,userData:userData,tableName:tableName,inputData:columnName2Value,returnedRowId:id});if(fnPostProcess){await fnPostProcess(trx,userData,id,input)}}else if(onConflictOptions){const conflictColumnValue=columnName2Value[onConflictOptions.column];id=await __getIdFromConflictColumn(trx,tableName,onConflictOptions.column,conflictColumnValue)}if(!id){throw new Error("FN_GEN_SAVE_INSERT_RETURNING_ID_FAILED")}return id}async function insert(trx,parentId,input){const columnName2Value=__genColumnName2Value(columnName2FnGetValueFromInput,parentId,input);const query=trx.queryBuilder().insert(columnName2Value).into(tableName).returning(["id"]);if(onConflictOptions){if(onConflictOptions.resolution==="ignore"){query.onConflict(onConflictOptions.column).ignore()}}const rows=await query;return{id:rows[0]?.id??"",columnName2Value:columnName2Value}}return create}async function __getIdFromConflictColumn(trx,tableName,column,columnValue){const row=await trx.queryBuilder().select(["id"]).from(tableName).where({[column]:columnValue}).first();return row?.id??""}function __genFnEdit({tableName:tableName,columnName2FnGetValueFromInput:columnName2FnGetValueFromInput,fnPreProcess:fnPreProcess,fnPostProcess:fnPostProcess}){async function edit(trx,selfId,input,userData){let actualColumnName2FnGetValueFromInput=columnName2FnGetValueFromInput;if(fnPreProcess){const preRetVal=await fnPreProcess(trx,userData,input);if(preRetVal){actualColumnName2FnGetValueFromInput=lodash_1.default.merge({},columnName2FnGetValueFromInput,preRetVal)}}const updateResult=await update(trx,selfId,input,actualColumnName2FnGetValueFromInput);if(updateResult){audit.logUpdate({trx:trx,userData:userData,tableName:tableName,rowId:selfId,oldRow:updateResult.oldRow,newRow:updateResult.newRow})}if(fnPostProcess){await fnPostProcess(trx,userData,selfId,input)}return selfId}function update(trx,selfId,input,localColumnName2FnGetValueFromInput){const columnName2Value=__genColumnName2Value(localColumnName2FnGetValueFromInput,selfId,input);return updateReturningOldAndNew({trx:trx,tableName:tableName,id:selfId,columnName2Value:columnName2Value})}return edit}function saveMultiple(args){const trx=args.trx;return trx?__saveMultipleWithTrx({...args,trx:trx}):layer1_1.dbService.getDb().transaction((_trx=>__saveMultipleWithTrx({...args,trx:_trx})))}async function __saveMultipleWithTrx({trx:trx,userData:userData,inputObjects:inputObjects,fnSave:fnSave}){return await bluebird_1.default.mapSeries(inputObjects,(inputObject=>fnSave(userData,inputObject,trx)))}function genFnSaveChildren({tableName:tableName,parentIdColumn:parentIdColumn,fnGetParentId:fnGetParentId,columnName2FnGetValue:columnName2FnGetValue,optionsForUpdateExistingMethod:optionsForUpdateExistingMethod,rankingColumn:rankingColumn,rankingGroupByKey:rankingGroupByKey,archiveInsteadOfDelete:archiveInsteadOfDelete,postDeleteDependencies:postDeleteDependencies,fnPreProcess:fnPreProcess,fnPostProcess:fnPostProcess}){const saveChildren=async(trx,inputObjects,userData,parentId)=>{const allParentIds=parentId?[parentId]:lodash_1.default.map(inputObjects,(inputObject=>fnGetParentId(inputObject)));if(fnPreProcess){inputObjects=await fnPreProcess(trx,userData,inputObjects,parentId??"")}let id2InputObject={};if(!optionsForUpdateExistingMethod){id2InputObject=await executeDeleteAndAddMethod(trx,allParentIds,inputObjects,userData,parentId,archiveInsteadOfDelete?"archive":undefined)}else{id2InputObject=await executeUpdateExistingMethod(trx,allParentIds,inputObjects,userData,parentId,optionsForUpdateExistingMethod.childIdColumn,optionsForUpdateExistingMethod.fnGetSelfId,archiveInsteadOfDelete?"archive":undefined)}if(fnPostProcess){await fnPostProcess(trx,userData,id2InputObject,parentId??"")}};async function executeDeleteAndAddMethod(trx,allParentIds,inputObjects,userData,parentId,archive){if(archive){await archiveChildren(trx,userData,allParentIds)}else{let foreignDependenciesToDelete=[];if(postDeleteDependencies){foreignDependenciesToDelete=await getForeignDependenciesToDelete(trx,allParentIds,postDeleteDependencies)}await deleteChildren(trx,userData,allParentIds);if(postDeleteDependencies){await processPostDeleteDependencies(trx,userData,foreignDependenciesToDelete)}}const saveSetValues=lodash_1.default.map(inputObjects,(inputObject=>({type:"insert",value:inputObject})));return await insertOrUpdateChildren(trx,saveSetValues,userData,parentId)}async function executeUpdateExistingMethod(trx,allParentIds,inputObjects,userData,parentId,childIdColumn,fnGetSelfId,archive){const existingValueIds=await getChildrenIds(trx,allParentIds,childIdColumn);const{idsToDelete:idsToDelete,valuesToInsert:valuesToInsert,valuesToUpdate:valuesToUpdate}=genSaveSetsByFnGetId({existingValueIds:existingValueIds,objects:inputObjects,fnGetIdFromObject:fnGetSelfId});const saveSetValues=__saveSets2SaveSetValues(valuesToInsert,valuesToUpdate);if(archive){await archiveChildren(trx,userData,allParentIds,childIdColumn,idsToDelete)}else{await deleteChildren(trx,userData,allParentIds,childIdColumn,idsToDelete)}return await insertOrUpdateChildren(trx,saveSetValues,userData,parentId)}async function getChildrenIds(trx,parentIds,childIdColumn){const rows=await trx.queryBuilder().select([childIdColumn]).from(tableName).whereIn(parentIdColumn,parentIds);return lodash_1.default.map(rows,(row=>row[childIdColumn]??""))}async function getForeignDependenciesToDelete(trx,parentIds,dependencies){return await bluebird_1.default.mapSeries(dependencies,(dependency=>getForeignDependenciesToDeleteSingle(trx,parentIds,dependency)))}async function getForeignDependenciesToDeleteSingle(trx,parentIds,dependency){const childIds=await getChildIds(trx,parentIds);const foreignIdColumn=dependency.foreignIdColumn??"id";const rows=await trx.queryBuilder().select({id:`${dependency.foreignTable}.${foreignIdColumn}`}).from(dependency.foreignTable).leftJoin(tableName,`${tableName}.${dependency.sourceColumn}`,`${dependency.foreignTable}.${foreignIdColumn}`).whereIn(`${tableName}.id`,childIds);const dependencyIds=lodash_1.default.compact(lodash_1.default.map(rows,(row=>row?.id??"")));return{...dependency,foreignRowIdsToDelete:dependencyIds}}async function getChildIds(trx,parentIds){const rows=await trx.queryBuilder().select(["id"]).from(tableName).whereIn(`${tableName}.${parentIdColumn}`,parentIds);return lodash_1.default.map(rows,(row=>row?.id??""))}async function deleteChildren(trx,userData,parentIds,childIdColumn,childIds){const query=trx.queryBuilder().delete().from(tableName).whereIn(parentIdColumn,parentIds).returning("*");if(childIdColumn&&childIds){query.whereIn(childIdColumn,childIds)}const rows=await query;await audit.logDeletes({trx:trx,userData:userData,tableName:tableName,oldRows:rows})}async function processPostDeleteDependencies(trx,userData,dependencies){await bluebird_1.default.each(dependencies,(dependency=>processPostDeleteDependency(trx,userData,dependency)))}async function processPostDeleteDependency(trx,userData,dependency){const rows=await trx.queryBuilder().delete().from(dependency.foreignTable).whereIn(`${dependency.foreignIdColumn??"id"}`,dependency.foreignRowIdsToDelete).returning("*");await audit.logDeletes({trx:trx,userData:userData,tableName:dependency.foreignTable,oldRows:rows})}async function archiveChildren(trx,userData,parentIds,childIdColumn,childIds){const childIdQuery=trx.queryBuilder().select(["id"]).from(tableName).whereIn(parentIdColumn,parentIds);if(childIdColumn&&childIds){childIdQuery.whereIn(childIdColumn,childIds)}const childIdRows=await childIdQuery;const dbChildIds=lodash_1.default.map(childIdRows,(row=>row.id));await __updateAndLogMultiple({trx:trx,tableName:tableName,userData:userData,rows:lodash_1.default.map(dbChildIds,(childId=>({id:childId,is_archived:true})))})}async function insertOrUpdateChildren(trx,saveSetValues,userData,parentId){if(saveSetValues.length===0){return{}}const nextRankingByGroup={};const rowIds=await mapFunctionsInChunks(lodash_1.default.map(saveSetValues,((saveSetValue,index)=>async()=>{const localParentId=parentId??fnGetParentId(saveSetValue.value);const columnName2Value=__genColumnName2Value(columnName2FnGetValue,localParentId,saveSetValue.value);if(!columnName2Value[parentIdColumn]){columnName2Value[parentIdColumn]=localParentId}if(rankingColumn){if(rankingGroupByKey){const groupValue=saveSetValue.value[rankingGroupByKey];__updateRankings(nextRankingByGroup,groupValue);columnName2Value[rankingColumn]=__getNextRankingForGroup(nextRankingByGroup,groupValue)}else{columnName2Value[rankingColumn]=index}}let id="";if(saveSetValue.type==="insert"){id=await insert(columnName2Value);await audit.logInsert({trx:trx,userData:userData,tableName:tableName,inputData:columnName2Value,returnedRowId:id})}else if(saveSetValue.type==="update"&&optionsForUpdateExistingMethod){id=optionsForUpdateExistingMethod.fnGetSelfId(saveSetValue.value);const updateResult=await updateReturningOldAndNew({trx:trx,tableName:tableName,idColumn:optionsForUpdateExistingMethod.childIdColumn,id:id,columnName2Value:columnName2Value});if(updateResult!==null){await audit.logUpdate({trx:trx,userData:userData,tableName:tableName,rowId:id,oldRow:updateResult.oldRow,newRow:updateResult.newRow})}}return id})),1);async function insert(columnName2Value){const rows=await trx.queryBuilder().insert(columnName2Value).into(tableName).returning(["id"]);return rows[0]?.id??""}const id2InputObject=lodash_1.default.zipObject(rowIds,lodash_1.default.map(saveSetValues,(saveSetValue=>saveSetValue.value)));return id2InputObject}return saveChildren}function __updateRankings(nextRankingByGroup,groupValue){if(lodash_1.default.isString(groupValue)){const oldValue=nextRankingByGroup[groupValue]??-1;nextRankingByGroup[groupValue]=oldValue+1}}function __getNextRankingForGroup(nextRankingByGroup,groupValue){if(lodash_1.default.isString(groupValue)){return nextRankingByGroup[groupValue]}else{return 0}}function __genColumnName2Value(columnName2FnGetValueFromInput,id,input){return lodash_1.default.mapValues(columnName2FnGetValueFromInput,(fnGetValue=>fnGetValue(input,id)))}function processValuePreservingNil(inputValue,fnProcess){return lodash_1.default.isUndefined(inputValue)?undefined:inputValue===null?null:fnProcess(inputValue)}async function updateReturningOldAndNew({trx:trx,tableName:tableName,idColumn:idColumn,id:id,columnName2Value:columnName2Value}){if(lodash_1.default.every(lodash_1.default.values(columnName2Value),(value=>lodash_1.default.isUndefined(value)))){return null}const columnNames=lodash_1.default.uniq([...lodash_1.default.keys(columnName2Value),"id"]);const tableOldRow="__old_row__";const tableNewRow="__new_row__";idColumn=idColumn??"id";const rows=await trx.queryBuilder().with(tableOldRow,trx.queryBuilder().select(columnNames).from(tableName).where({[idColumn]:id})).with(tableNewRow,trx.queryBuilder().update(columnName2Value).table(tableName).where({[idColumn]:id}).returning(columnNames)).select(columnNames).select({__type__:trx.raw("?",["old"])}).from(tableOldRow).unionAll(trx.queryBuilder().select(columnNames).select({__type__:trx.raw("?",["new"])}).from(tableNewRow));const rowsByType=lodash_1.default.keyBy(rows,(row=>row.__type__));if(!rowsByType.old||!rowsByType.new){return null}delete rowsByType.old.__type__;delete rowsByType.new.__type__;return{oldRow:rowsByType.old,newRow:rowsByType.new}}function genFnArchive({tableName:tableName,columnName:columnName,fnGenQueryGetId:fnGenQueryGetId,fnPostProcess:fnPostProcess}){function archive(userData,id,trx){if(trx){return archiveWithTransaction(trx,userData,id)}else{return layer1_1.dbService.getDb().transaction((_trx=>archiveWithTransaction(_trx,userData,id)))}}async function archiveWithTransaction(trx,userData,id){const updateResult=await updateReturningOldAndNew({trx:trx,tableName:tableName,id:fnGenQueryGetId?fnGenQueryGetId(trx,id):id,columnName2Value:{[columnName??"is_archived"]:true}});if(updateResult){const newRowId=updateResult.newRow.id;await audit.logUpdate({trx:trx,userData:userData,tableName:tableName,rowId:newRowId,oldRow:updateResult.oldRow,newRow:updateResult.newRow})}if(fnPostProcess){await fnPostProcess(trx,userData,id)}}return archive}async function __updateAndLogMultiple({trx:trx,userData:userData,tableName:tableName,rows:rows}){const updateResults=lodash_1.default.compact(await bluebird_1.default.map(rows,(row=>updateReturningOldAndNew({trx:trx,tableName:tableName,id:row.id,columnName2Value:lodash_1.default.pickBy(row,((value,key)=>key!=="id"))}))));await bluebird_1.default.each(updateResults,(async updateResult=>{await audit.logUpdate({trx:trx,userData:userData,tableName:tableName,rowId:updateResult.newRow.id,oldRow:updateResult.oldRow,newRow:updateResult.newRow})}))}async function deleteAndLog(args,trx){return trx?__deleteAndLogWithTrx(trx,args):layer1_1.dbService.getDb().transaction((_trx=>__deleteAndLogWithTrx(_trx,args)))}async function __deleteAndLogWithTrx(trx,{userData:userData,tableName:tableName,ids:ids}){const oldRows=await(trx??layer1_1.dbService.getDb()).queryBuilder().delete().from(tableName).whereIn("id",ids).returning("*");await audit.logDeletes({trx:trx,userData:userData,tableName:tableName,oldRows:oldRows})}async function withTransaction(fn,trx){return trx?fn(trx):layer1_1.dbService.getDb().transaction((_trx=>fn(_trx)))}function toStringType(value){return lodash_1.default.isString(value)?value:""}async function getAbstractObjectIdCreateIfNotExists(input){const upsertRows=await layer1_1.dbService.getDb().queryBuilder().insert(input.specificIdsRow).into(input.tableName).returning(["id"]).onConflict().ignore();let id=toStringType(upsertRows[0]?.id);if(!id){const selectRow=await layer1_1.dbService.getDb().queryBuilder().select(["id"]).from(input.tableName).where(input.specificIdsRow).first();id=toStringType(selectRow?.id)}if(!id){throw new Error("CANNOT_RETRIEVE_ABSTRACT_OBJECT_ID")}return id}