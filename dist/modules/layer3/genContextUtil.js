"use strict";var __importDefault=this&&this.__importDefault||function(mod){return mod&&mod.__esModule?mod:{default:mod}};Object.defineProperty(exports,"__esModule",{value:true});exports.init=init;exports.context2UserData=context2UserData;const lodash_1=__importDefault(require("lodash"));const layer1_1=require("../layer1");const __emptyContext={userId:"",authProviderUserId:"",clientIp:""};function init(config){if((config.allowProxyUserRequests||config.fnCheckUserCanIssueProxyUserRequests)&&(config.isProd||config.environmentName.toLowerCase()==="prod"||config.environmentName.toLowerCase()==="production")){throw new Error("GEN_CONTEXT_UTIL__UNSECURE_CONFIG_DETECTED")}async function callableGenContext(headers){const authorizationHeader=headers.authorization||"";const accessToken=__authorizationHeader2AuthToken(authorizationHeader);const clientIp=__getClientIp(headers);const context={base:{...lodash_1.default.cloneDeep(__emptyContext),clientIp:clientIp}};const authProviderUserIdFromToken=accessToken?await layer1_1.jwtUtil.decodeJwt(accessToken):"";if(authProviderUserIdFromToken){context.base.authProviderUserId=authProviderUserIdFromToken}const headerAsAuthProviderUserId=headers["x-as-auth-provider-user-id"];const overrideAuthProviderUserId=headerAsAuthProviderUserId&&typeof headerAsAuthProviderUserId==="string"?headerAsAuthProviderUserId:"";if(authProviderUserIdFromToken&&config.allowProxyUserRequests&&!config.isProd&&config.environmentName.toLowerCase()!=="prod"&&config.environmentName.toLowerCase()!=="production"&&overrideAuthProviderUserId&&await(config.fnCheckUserCanIssueProxyUserRequests?.(authProviderUserIdFromToken))){context.base.authProviderUserId=overrideAuthProviderUserId}try{return await config.fnGenContextFromBase(context.base,accessToken)}catch{return context}}const genContext=expressContext=>callableGenContext(expressContext.req.headers);return{genContext:genContext,callableGenContext:callableGenContext}}function context2UserData(context){return{userId:context.base.userId,authProviderUserId:context.base.authProviderUserId,clientIp:context.base.clientIp}}function __authorizationHeader2AuthToken(authorizationHeader){const bearerPrefix="Bearer ";if(!authorizationHeader||!authorizationHeader.startsWith(bearerPrefix)){return""}const token=authorizationHeader.slice(bearerPrefix.length);return token}function __getClientIp(headers){const xForwardedFor=headers["x-forwarded-for"];if(!xForwardedFor){return""}else if(lodash_1.default.isString(xForwardedFor)){const ipPieces=lodash_1.default.compact(lodash_1.default.map(lodash_1.default.split(xForwardedFor,", "),(piece=>piece.trim())));return ipPieces[0]||""}else{return xForwardedFor[0]||""}}