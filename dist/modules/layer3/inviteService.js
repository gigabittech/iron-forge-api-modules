"use strict";var __importDefault=this&&this.__importDefault||function(mod){return mod&&mod.__esModule?mod:{default:mod}};Object.defineProperty(exports,"__esModule",{value:true});exports.init=init;exports.sendUserInviteEmail=sendUserInviteEmail;exports.sendAllUnsentInvites=sendAllUnsentInvites;const lodash_1=__importDefault(require("lodash"));const bluebird_1=require("bluebird");const layer1_1=require("../layer1");const layer2_1=require("../layer2");let __config=null;function init(config){__config=config}function __getConfig(){if(!__config){throw new Error("MODULE_NOT_INITIALIZED: inviteService")}return __config}async function __getInvite(trx,inviteId){const config=__getConfig();const builder=layer2_1.dbUtil.makeBuilder(trx);const row=await builder.queryBuilder().select({recipientEmail:"recipient_email",inviteCode:"invite_code",hasBeenSent:builder.raw("sent_timestamp IS NOT NULL")}).from(config.tableNames.invite).where({id:inviteId}).first();if(!row){throw new Error("CANNOT_RETRIEVE_INVITE")}return{recipientEmail:row.recipientEmail,inviteCode:row.inviteCode,hasBeenSent:row.hasBeenSent}}async function __setSentTimestamp(trx,inviteId){const config=__getConfig();const builder=layer2_1.dbUtil.makeBuilder(trx);await builder.queryBuilder().update({sent_timestamp:builder.raw("NOW()")}).table(config.tableNames.invite).where({id:inviteId})}const __defaultFnGenSubject=generalAppName=>`${generalAppName} user invitation`;const __defaultFnGenUrl=(webAppUrl,inviteCode)=>`${webAppUrl}/auth/register/${inviteCode}`;const __defaultFnGenBody=(generalAppName,inviteUrl)=>`You have been invited to create a user account with ${generalAppName}. Please click the following link to continue.\n\n${inviteUrl}`;async function sendUserInviteEmail({trx:trx,inviteId:inviteId,fnGenSubject:fnGenSubject,fnGenUrl:fnGenUrl,fnGenBody:fnGenBody}){await layer2_1.dbUtil.withTransaction((async _trx=>{const actualFnGenSubject=fnGenSubject??__defaultFnGenSubject;const actualFnGenUrl=fnGenUrl??__defaultFnGenUrl;const actualFnGenBody=fnGenBody??__defaultFnGenBody;const config=__getConfig();const{recipientEmail:recipientEmail,inviteCode:inviteCode,hasBeenSent:hasBeenSent}=await __getInvite(_trx,inviteId);if(hasBeenSent){return}const subject=actualFnGenSubject(config.generalAppName);const inviteUrl=actualFnGenUrl(config.webAppUrl,inviteCode);const body=actualFnGenBody(config.generalAppName,inviteUrl);await layer2_1.emailService.sendEmail({toEmail:recipientEmail,subject:subject,body:body});await __setSentTimestamp(_trx,inviteId)}),trx)}async function sendAllUnsentInvites(){if(!__config){throw new Error("INVITE_SERVICE__NO_CONFIG")}const tableName=__config.tableNames.invite;const inviteIds=await __getAllUnsentInviteIds(tableName);await bluebird_1.Promise.each(inviteIds,(async inviteId=>{await layer2_1.dbUtil.withTransaction((async trx=>{await layer2_1.dbUtil.lock(trx,{[tableName]:inviteId});try{await sendUserInviteEmail({trx:trx,inviteId:inviteId})}catch(err){console.error("EMAIL_SEND_ERROR");console.error(err)}}))}))}async function __getAllUnsentInviteIds(tableName){const rows=await layer1_1.dbService.getDb().queryBuilder().select(["id"]).from(tableName).whereNull("sent_timestamp");return lodash_1.default.map(rows,(row=>lodash_1.default.isString(row?.id)?row.id:""))}